# Run all tests on all platforms.
name: Run All Tests

on:
  # on main, we want to know that all commits are passing at a glance, any deviation should help debugging errors at a glance
  push:
    branches: [main]
  # tests must run for a PR to be valid and pass merge queue muster
  merge_group:
    branches: [main]
  # we can trigger this with a comment on a branch (for testing etc)
  pull_request_review_comment:
    types: [created]
  pull_request:
    branches: ["*"]


env:
  CARGO_INCREMENTAL: 0 # bookkeeping for incremental builds has overhead, not useful in CI.
  NODE_COUNT: 14

jobs:

  pre_job:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          # All of these options are optional, so you can remove them if you are happy with the defaults
          concurrent_skipping: 'never'
          skip_after_successful_duplicate: 'true'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'

  cargo-udeps:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')"
    name: Unused dependency check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          #Needs nightly to distinguish between deps of different versions
          toolchain: nightly
          override: true

      - name: Install cargo-udeps
        run: cargo install cargo-udeps --locked
      - name: Run cargo-udeps
        run: cargo +nightly udeps --all-targets

  # TODO: Reenable when blst has been updated and this isn't just red the whole time.

  # cargo-deny:
#           if: "!startsWith(github.event.head_commit.message, 'chore(release):')"
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2

  #   - shell: bash
  #     run: wget https://raw.githubusercontent.com/maidsafe/QA/master/misc-scripts/deny.toml

  #   - uses: EmbarkStudios/cargo-deny-action@v1

  lint:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@f114310111fdbd07e99f47f9ca13d62b3ec98372

  checks:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')"
    name: Run rustfmt and clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - name: Check formatting
        run: cargo fmt --all -- --check

      - shell: bash
        run: cargo clippy --all-targets --all-features -- -Dwarnings

      - name: Check documentation
        # Deny certain `rustdoc` lints that are unwanted.
        # See https://doc.rust-lang.org/rustdoc/lints.html for lints that are 'warning' by default.
        run: RUSTDOCFLAGS="--deny=warnings" cargo doc --no-deps

  build-arm:
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    name: build arm
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: arm-unknown-linux-musleabi
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: stable
          override: true
      - shell: bash
        run: make gha-build-${{ matrix.target }}
      - uses: actions/upload-artifact@main
        with:
          name: safe_network-${{ matrix.target }}
          path: |
            artifacts
            !artifacts/.cargo-lock

  unit:
    needs: pre_job
    if: "!startsWith(github.event.head_commit.message, 'chore(release):') && needs.pre_job.outputs.should_skip != 'true'"
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}-unit

      - name: Build sn_interface tests before running
        run: cd sn_interface && cargo test --no-run --release
        timeout-minutes: 50

      - name: Run sn_interface tests
        timeout-minutes: 25
        run: cd sn_interface && cargo test --release

      - name: Build sn_fault_detection tests before running
        run: cd sn_fault_detection && cargo test --no-run --release
        timeout-minutes: 50

      - name: Run sn_fault_detection tests
        timeout-minutes: 14
        env:
          RUST_LOG: sn_fault_detection
        run: cd sn_fault_detection && cargo test --release

      - name: Run sn_comms tests
        timeout-minutes: 10
        run: cargo test --release -p sn_comms

      - name: Build sn_node tests before running
        run: cd sn_node && cargo test --no-run --release
        timeout-minutes: 50

      - name: Run sn_node tests
        timeout-minutes: 20
        run: cd sn_node && cargo test --release

      - name: Build sn_cli tests before running
        run: cd sn_cli && cargo test --no-run --release --features data-network
        timeout-minutes: 50

      - name: Run sn_cli tests
        timeout-minutes: 25
        run: cd sn_cli && cargo test --release --bin safe --features data-network

  e2e:
    needs: pre_job
    if: "!startsWith(github.event.head_commit.message, 'chore(release):') && needs.pre_job.outputs.should_skip != 'true'"
    name: E2E tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: install ripgrep ubuntu
        run: sudo apt-get install ripgrep
        if: matrix.os == 'ubuntu-latest'

      - name: install ripgrep mac
        run: brew install ripgrep
        if: matrix.os == 'macos-latest'

      - name: install ripgrep windows
        run: choco install ripgrep
        if: matrix.os == 'windows-latest'

      - name: Build sn bins
        run: cd sn_node && cargo build --release --bins
        timeout-minutes: 60

      - name: Start a local network
        run: cargo run --release --bin testnet -- --interval 30000 --node-path ./target/release/safenode
        id: section-startup
        env:
          RUST_LOG: "safenode,sn_node,sn_comms,sn_consensus,sn_fault_detection,sn_interface=trace"

      - name: Wait for all nodes to join
        shell: bash
        run: ./resources/scripts/wait_for_nodes_to_join.sh
        timeout-minutes: 5

      - name: Check we have expected elders
        shell: bash
        run: rg "7 Elders, " ~/.safe/node/local-test-network -u

      - name: Build all tests before running non ubuntu
        run: cd sn_client && cargo test --no-run --release --features check-replicas
        timeout-minutes: 50

      - name: Run client tests (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        env:
          SN_CMD_TIMEOUT: 10
          SN_QUERY_TIMEOUT: 10
          RUST_LOG: "sn_client=trace,qp2p=debug"
        run: cd sn_client && cargo test --release --features check-replicas
        timeout-minutes: 7

      - name: Run client tests
        if: matrix.os != 'ubuntu-latest'
        env:
          RUST_LOG: "sn_client=trace,qp2p=debug"
        run: cd sn_client && cargo test --release --features check-replicas
        timeout-minutes: 15

      - name: Run example app for file API against local network
        timeout-minutes: 2
        shell: bash
        run: cd sn_client && cargo run --release --example client_files

      - name: Ensure no nodes have left during test runs
        timeout-minutes: 1
        shell: bash
        if: matrix.os != 'windows-latest'
        # we just want to print out the info. If there is none, an exit code of 1 is returned, so here we return true
        run: rg "Membership - decided" $HOME/.safe/node/local-test-network | rg Left || true

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        if: failure() && matrix.os != 'windows-latest'
        continue-on-error: true
        run: |
          echo "$(pgrep safenode | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Kill all nodes
        shell: bash
        timeout-minutes: 1
        if: failure()
        continue-on-error: true
        run: |
          pkill safenode
          echo "$(pgrep safenode | wc -l) nodes still running"

      # - name: Generate StateMap
      #   shell: bash
      #   continue-on-error: true
      #   run: |
      #     cargo install --git https://github.com/TritonDataCenter/statemap.git
      #     ./resources/scripts/statemap-preprocess.sh --run-statemap > safe_statemap.svg

      # - name: Upload StateMap
      #   uses: actions/upload-artifact@main
      #   with:
      #     name: statemap_e2e_${{matrix.os}}.svg
      #     path: safe_statemap.svg
      #   continue-on-error: true

      - name: Tar log files
        shell: bash
        continue-on-error: true
        run: find ~/.safe/node/local-test-network -iname '*.log*' | tar -zcvf log_files.tar.gz --files-from -
        if: failure()

      - name: Upload Node Logs
        uses: actions/upload-artifact@main
        with:
          name: sn_node_logs_e2e_${{matrix.os}}
          path: log_files.tar.gz
        if: failure()
        continue-on-error: true

  e2e-msg-happy-path:
    needs: pre_job
    if: "!startsWith(github.event.head_commit.message, 'chore(release):') && needs.pre_job.outputs.should_skip != 'true'"
    name: E2E tests (msg happy path)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: install ripgrep ubuntu
        run: sudo apt-get install ripgrep
        if: matrix.os == 'ubuntu-latest'

      - name: install ripgrep mac
        run: brew install ripgrep
        if: matrix.os == 'macos-latest'

      - name: install ripgrep windows
        run: choco install ripgrep
        if: matrix.os == 'windows-latest'

      - name: Build sn bins
        run: cd sn_node && cargo build --release --bins
        timeout-minutes: 60

      - name: Start a local network
        run: cargo run --release --bin testnet -- --interval 30000 --node-path ./target/release/safenode
        id: section-startup
        env:
          RUST_LOG: "safenode,sn_node,sn_comms,sn_consensus,sn_fault_detection,sn_interface=trace"

      - name: Wait for all nodes to join
        shell: bash
        run: ./resources/scripts/wait_for_nodes_to_join.sh
        timeout-minutes: 5

      - name: Check we have expected elders
        shell: bash
        run: rg "7 Elders, " ~/.safe/node/local-test-network -u

      - name: Build all tests before running non ubuntu
        run: cd sn_client && cargo test --no-run --release --features msg-happy-path
        timeout-minutes: 50

      - name: Run client tests (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        env:
          SN_CMD_TIMEOUT: 10
          SN_QUERY_TIMEOUT: 10
          RUST_LOG: "sn_client=trace,qp2p=debug"
        run: cd sn_client && cargo test --release --features msg-happy-path
        timeout-minutes: 7

      - name: Run client tests
        if: matrix.os != 'ubuntu-latest'
        env:
          RUST_LOG: "sn_client=trace,qp2p=debug"
        run: cd sn_client && cargo test --release --features msg-happy-path
        timeout-minutes: 15

      - name: Run example app for file API against local network
        timeout-minutes: 2
        shell: bash
        run: cd sn_client && cargo run --release --features msg-happy-path --example client_files

      - name: Ensure no nodes have left during test runs
        timeout-minutes: 1
        shell: bash
        if: matrix.os != 'windows-latest'
        # we just want to print out the info. If there is none, an exit code of 1 is returned, so here we return true
        run: rg "Membership - decided" $HOME/.safe/node/local-test-network | rg Left || true

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        if: failure() && matrix.os != 'windows-latest'
        continue-on-error: true
        run: |
          echo "$(pgrep safenode | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Kill all nodes
        shell: bash
        timeout-minutes: 1
        if: failure()
        continue-on-error: true
        run: |
          pkill safenode
          echo "$(pgrep safenode | wc -l) nodes still running"

      # - name: Generate StateMap
      #   shell: bash
      #   continue-on-error: true
      #   run: |
      #     cargo install --git https://github.com/TritonDataCenter/statemap.git
      #     ./resources/scripts/statemap-preprocess.sh --run-statemap > safe_statemap.svg

      # - name: Upload StateMap
      #   uses: actions/upload-artifact@main
      #   with:
      #     name: statemap_e2e_${{matrix.os}}.svg
      #     path: safe_statemap.svg
      #   continue-on-error: true

      - name: Tar log files
        shell: bash
        continue-on-error: true
        run: find ~/.safe/node/local-test-network -iname '*.log*' | tar -zcvf log_files.tar.gz --files-from -
        if: failure()

      - name: Upload Node Logs
        uses: actions/upload-artifact@main
        with:
          name: sn_node_logs_e2e_msg_happy_path_${{matrix.os}}
          path: log_files.tar.gz
        if: failure()
        continue-on-error: true

  e2e-churn:
    needs: pre_job
    if: "!startsWith(github.event.head_commit.message, 'chore(release):') && needs.pre_job.outputs.should_skip != 'true'"
    name: E2E Churn test
    runs-on: ubuntu-latest
    env:
      RUST_LOG: sn_testnet,safenode,sn_node,sn_fault_detection,sn_comms,sn_interface=trace
    steps:
      - uses: actions/checkout@v2

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: Build network churn data integrity test
        shell: bash
        run: cargo build --release --example churn

      # This starts a NODE_COUNT node network, and then adds 12 more nodes. We should kill before moving on to split checks
      - name: Run network churn data integrity test
        timeout-minutes: 55 # made 55 for now due to slow network startup
        shell: bash
        run: cargo run --release --example churn

      - name: Ensure no nodes have left during test runs
        timeout-minutes: 1
        shell: bash
        # we just want to print out the info. If there is none, an exit code of 1 is returned, so here we return true
        run: rg "Membership - decided" $HOME/.safe/node/local-test-network | rg Left || true

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        continue-on-error: true
        run: |
          echo "$(pgrep safenode | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Kill all nodes
        shell: bash
        timeout-minutes: 1
        if: failure()
        continue-on-error: true
        run: |
          pkill safenode
          echo "$(pgrep safenode | wc -l) nodes still running"

      # - name: Generate StateMap
      #   shell: bash
      #   if: failure()
      #   continue-on-error: true
      #   run: |
      #     cargo install --git https://github.com/TritonDataCenter/statemap.git
      #     ./resources/scripts/statemap-preprocess.sh --run-statemap > safe_statemap.svg

      # - name: Upload StateMap
      #   uses: actions/upload-artifact@main
      #   if: failure()
      #   with:
      #     name: statemap_e2e_split_self_hosted_ubuntu.svg
      #     path: safe_statemap.svg
      #   continue-on-error: true

      - name: Tar log files
        shell: bash
        continue-on-error: true
        run: find ~/.safe/node/local-test-network -iname '*.log*' | tar -zcvf log_files.tar.gz --files-from -
        if: failure()

      - name: Upload Node Logs
        uses: actions/upload-artifact@main
        with:
          name: sn_node_logs_churn_self_hosted_ubuntu
          path: log_files.tar.gz
        if: failure()
        continue-on-error: true

  # e2e-split:
#   #        if: "!startsWith(github.event.head_commit.message, 'chore(release):')"
  #   # disabled temporarily since `self-hosted-ubuntu` runner not available for NodeRefactorBranch branch
  #   if: false
  #   name: E2E tests w/ full network
  #   runs-on: self-hosted-ubuntu
  #   env:
  #     NODE_COUNT: 14
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Install Rust
  #       id: toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true

  #     - uses: Swatinem/rust-cache@v1
  #       continue-on-error: true
  #       with:
  #         cache-on-failure: true
  #         sharedKey: ${{github.run_id}}

  # - name: install ripgrep ubuntu
  #   run: sudo apt-get install ripgrep
  #   if: matrix.os == 'ubuntu-latest'

  # - name: install ripgrep mac
  #   run: brew install ripgrep
  #   if: matrix.os == 'macos-latest'

  # - name: install ripgrep windows
  #   run: choco install ripgrep
  #   if: matrix.os == 'windows-latest'

  #     - name: Build sn bins
  #       run: cd sn_node && cargo build --release --bins
  #       timeout-minutes: 60

  #     - name: Build testnet
  #       run: cd testnet && cargo build  --release --bin testnet
  #       timeout-minutes: 60

  #     # - name: Build log_cmds_inspector
  #     #   run: cargo build  --release --bin log_cmds_inspector
  #     #   timeout-minutes: 60

  #     # This starts a NODE_COUNT node network, and then adds 12 more nodes. We should kill before moving on to split checks
  #     - name: Run network churn data integrity test
  #       timeout-minutes: 35 # made 35 for now due to client slowdown. TODO: fix that!
  #       shell: bash
  #       run: cargo run --release --example churn
  #       env:
  #         RUST_LOG: "safenode,sn_client,sn_comms,sn_consensus,sn_fault_detection=trace,sn_interface=trace"

  #     # - name: Print Network Stats after churn test
  #     #   shell: bash
  #     #   run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network

  #     # - name: Cleanup churn test
  #     #   run: |
  #     #     killall -9 safenode
  #     #     sleep 10
  #     #     rm -rf ~/.safe

  #     # # This starts a NODE_COUNT node network, and then adds 14 _more_ nodes
  #     # - name: Run network split data integrity test
  #     #   timeout-minutes: 35 # made 35 for now due to client slowdown. TODO: fix that!
  #     #   shell: bash
  #     #   run: cargo run --release --example network_split
  #     #   env:
  #     #     RUST_LOG: "safenode,sn_client,sn_comms,sn_consensus,sn_fault_detection=trace"

  #     # - name: Print Network Log Stats at start
  #     #   shell: bash
  #     #   run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network

  #     # - name: Wait for all nodes to join
  #     #   shell: bash
  #     #   # we should not have the full 33 nodes as yet.
  #     #   run: NODE_COUNT=28 ./resources/scripts/wait_for_nodes_to_join.sh
  #     #   timeout-minutes: 20

  #     # - name: Is the network split and ready?
  #     #   shell: bash
  #     #   run: ./resources/scripts/network_is_ready.sh
  #     #   timeout-minutes: 5

  #     # - name: Print Network Log Stats after nodes joined
  #     #   shell: bash
  #     #   run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network

  #     - name: Build all tests before running
  #       run: cd sn_client && cargo test --no-run --release -p sn_client
  #       timeout-minutes: 50

  #     - name: Run client tests
  #       env:
  #         RUST_LOG: "sn_client=trace,qp2p=debug"
  #       run: cargo test --release -p sn_client
  #       timeout-minutes: 25

  #     - name: Run example app for file API against local network
  #       timeout-minutes: 10
  #       shell: bash
  #       run: cargo run --release --example client_files

  #     - name: Ensure no nodes have left during test runs
  #       timeout-minutes: 1
  #       shell: bash
  #       if: matrix.os != 'windows-latest'
  #       # we just want to print out the info. If there is none, an exit code of 1 is returned, so here we return true
  #       run: rg "Membership - decided" $HOME/.safe/node/local-test-network | rg Left || true

  #     - name: Are nodes still running...?
  #       shell: bash
  #       timeout-minutes: 1
  #       continue-on-error: true
  #       run: |
  #         echo "$(pgrep safenode | wc -l) nodes still running"
  #         ls $HOME/.safe/node/local-test-network

  #      - name: Kill all nodes
  #        shell: bash
  #        timeout-minutes: 1
  #        if: failure()
  #        continue-on-error: true
  #        run: |
  #          pkill safenode
  #          echo "$(pgrep safenode | wc -l) nodes still running"

  #     # - name: Print Network Log Stats
  #     #   shell: bash
  #     #   continue-on-error: true
  #     #   run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network

  #     - name: Generate StateMap
  #       shell: bash
  #       continue-on-error: true
  #       run: |
  #         cargo install --git https://github.com/TritonDataCenter/statemap.git
  #         ./resources/scripts/statemap-preprocess.sh --run-statemap > safe_statemap.svg

  #     - name: Upload StateMap
  #       uses: actions/upload-artifact@main
  #       with:
  #         name: statemap_e2e_split_self_hosted_ubuntu.svg
  #         path: safe_statemap.svg
  #       continue-on-error: true

  #     - name: Tar log files
  #       shell: bash
  #       continue-on-error: true
  #       run: find ~/.safe/node/local-test-network -iname '*.log*' | tar -zcvf log_files.tar.gz --files-from -
  #       if: failure()

  #     - name: Upload Node Logs
  #       uses: actions/upload-artifact@main
  #       with:
  #         name: sn_node_logs_e2e_split_self_hosted_ubuntu
  #         path: log_files.tar.gz
  #       if: failure()
  #       continue-on-error: true

  #    # if we don't clean up, the .safe folder might persist between runs
  #     - name: Cleanup self-hosted runner
  #       if: always()
  #       run: |
  #         killall -9 safenode
  #         sleep 10
  #         rm -rf ~/.safe

  api:
    needs: pre_job
    if: "!startsWith(github.event.head_commit.message, 'chore(release):') && needs.pre_job.outputs.should_skip != 'true'"
    name: Run API tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: install ripgrep ubuntu
        run: sudo apt-get install ripgrep
        if: matrix.os == 'ubuntu-latest'

      - name: install ripgrep mac
        run: brew install ripgrep
        if: matrix.os == 'macos-latest'

      - name: install ripgrep windows
        run: choco install ripgrep
        if: matrix.os == 'windows-latest'

      - name: Build sn bins
        run: cd sn_node && cargo build --release --bins
        timeout-minutes: 60

      - name: Start a local network
        run: cargo run --release --bin testnet -- --interval 30000 --node-path ./target/release/safenode
        id: section-startup
        env:
          RUST_LOG: "safenode,sn_node,sn_comms,sn_consensus,sn_fault_detection,sn_interface=trace"

      - name: Wait for all nodes to join
        shell: bash
        run: ./resources/scripts/wait_for_nodes_to_join.sh
        timeout-minutes: 5

      - name: Build all tests before running
        run: cd sn_api && cargo test --no-run --release --features check-replicas
        timeout-minutes: 50

      - name: Run API tests
        env:
          RUST_LOG: "sn_api=trace,sn_client=trace"
        run: cd sn_api && cargo test --release --features check-replicas
        timeout-minutes: 7

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        if: failure() && matrix.os
        run: |
          echo "$(pgrep safenode | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Kill all nodes
        shell: bash
        timeout-minutes: 1
        if: failure()
        continue-on-error: true
        run: |
          pkill safenode
          echo "$(pgrep safenode | wc -l) nodes still running"

      - name: Ensure no nodes have left during test runs
        timeout-minutes: 1
        shell: bash
        if: matrix.os != 'windows-latest'
        # we just want to print out the info. If there is none, an exit code of 1 is returned, so here we return true
        run: rg "Membership - decided" $HOME/.safe/node/local-test-network | rg Left || true

      # - name: Generate StateMap
      #   shell: bash
      #   continue-on-error: true
      #   run: |
      #     cargo install --git https://github.com/TritonDataCenter/statemap.git
      #     ./resources/scripts/statemap-preprocess.sh --run-statemap > safe_statemap.svg

      # - name: Upload StateMap
      #   uses: actions/upload-artifact@main
      #   with:
      #     name: statemap_api_${{matrix.os}}.svg
      #     path: safe_statemap.svg
      #   continue-on-error: true

      - name: Tar log files
        shell: bash
        continue-on-error: true
        run: find ~/.safe/node/local-test-network -iname '*.log*' | tar -zcvf log_files.tar.gz --files-from -
        if: failure()

      - name: Upload Node Logs
        uses: actions/upload-artifact@main
        with:
          name: sn_node_logs_api_${{matrix.os}}
          path: log_files.tar.gz
        if: failure()
        continue-on-error: true

  cli:
    needs: pre_job
    if: "!startsWith(github.event.head_commit.message, 'chore(release):') && needs.pre_job.outputs.should_skip != 'true'"
    name: Run CLI tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: install ripgrep ubuntu
        run: sudo apt-get install ripgrep
        if: matrix.os == 'ubuntu-latest'

      - name: install ripgrep mac
        run: brew install ripgrep
        if: matrix.os == 'macos-latest'

      - name: install ripgrep windows
        run: choco install ripgrep
        if: matrix.os == 'windows-latest'

      - name: Build sn bins
        run: cd sn_node && cargo build --release --bins
        timeout-minutes: 60

      - name: Start a local network
        run: cargo run --release --bin testnet -- --interval 30000 --node-path ./target/release/safenode
        id: section-startup
        env:
          RUST_LOG: "safenode,sn_node,sn_comms,sn_consensus,sn_fault_detection,sn_interface=trace"

      - name: Wait for all nodes to join
        shell: bash
        run: ./resources/scripts/wait_for_nodes_to_join.sh
        timeout-minutes: 5

      - name: Generate keys for test run
        run: cargo run --package sn_cli --release -- keys create --for-cli

      - name: Build all tests before running
        run: cd sn_cli && cargo test --no-run --release --features check-replicas,data-network
        timeout-minutes: 50

      - name: Run CLI tests
        run: cd sn_cli && cargo test --release --features check-replicas,data-network -- --test-threads=1
        timeout-minutes: 7

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        if: failure() && matrix.os
        run: |
          echo "$(pgrep safenode | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Kill all nodes
        shell: bash
        timeout-minutes: 1
        if: failure()
        continue-on-error: true
        run: |
          pkill safenode
          echo "$(pgrep safenode | wc -l) nodes still running"

      - name: Ensure no nodes have left during test runs
        timeout-minutes: 1
        shell: bash
        if: matrix.os != 'windows-latest'
        # we just want to print out the info. If there is none, an exit code of 1 is returned, so here we return true
        run: rg "Membership - decided" $HOME/.safe/node/local-test-network | rg Left || true

      # - name: Generate StateMap
      #   shell: bash
      #   continue-on-error: true
      #   run: |
      #     cargo install --git https://github.com/TritonDataCenter/statemap.git
      #     ./resources/scripts/statemap-preprocess.sh --run-statemap > safe_statemap.svg

      # - name: Upload StateMap
      #   uses: actions/upload-artifact@main
      #   with:
      #     name: statemap_cli_${{matrix.os}}.svg
      #     path: safe_statemap.svg
      #   continue-on-error: true

      - name: Tar log files
        shell: bash
        continue-on-error: true
        run: find ~/.safe/node/local-test-network -iname '*.log*' | tar -zcvf log_files.tar.gz --files-from -
        if: failure()

      - name: Upload Node Logs
        uses: actions/upload-artifact@main
        with:
          name: sn_node_logs_cli_${{matrix.os}}
          path: log_files.tar.gz
        if: failure()
        continue-on-error: true

  # make sure all the jobs are not failed.
  # Note that the duplicated jobs might be skipped.
  merge-after-tests:
    needs:
      - pre_job
      - cargo-udeps
      - lint
      - checks
      - build-arm
      - unit
      - e2e
      - e2e-msg-happy-path
      - e2e-churn
      - api
      - cli
    runs-on: ubuntu-latest
    if: "! failure()"
    steps:
      - run: echo "All checks passed, ready to merge"
