# E2E workflow.
#
# Runs basic checks with the CLI + authenticator

name: E2E

on: pull_request

env:
  # Turn on backtrace as needed. Genera (passing) CI should not need this.
  # RUST_BACKTRACE: 1
  # Deny all compiler warnings.
  RUSTFLAGS: "-D warnings"
  SAFE_AUTH_PASSPHRASE: "x"
  SAFE_AUTH_PASSWORD: "y"

jobs:
  tests:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: E2E tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest]
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      # Install Rust and required components
      - uses: actions-rs/toolchain@v1
        id: toolchain
        name: Install Rust & required components
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Mac setup timeout
        if: matrix.os == 'macos-latest'
        run: |
          brew install coreutils
          alias timeout=gtimeout

      - name: Mac install ripgrep
        if: matrix.os == 'macos-latest'
        run: brew install ripgrep

      - name: ubuntu install ripgrep
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get -y install ripgrep

      - name: windows install ripgrep
        if: matrix.os == 'windows-latest'
        run: choco install ripgrep

      # Cache.
      - name: Cargo cache registry, index and build
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          # We use a separate cache to the normal build caches as we use different features for e2e testing
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-cargo-cache-e2e-${{ hashFiles('**/Cargo.lock') }}

      - name: Build launch local network
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features=always-joinable,test-utils --bins --examples --tests

      - run: ./target/release/testnet
        if: matrix.os != 'windows-latest'
        env:
          NODE_COUNT: "15" # TODO: change it back to 43 (this should be a split section)

      # TODO: windows with split section network has been failing w/ SO.
      # when we have that sorted we can reenable the full networks
      - run: ./target/release/testnet
        if: matrix.os == 'windows-latest'
        env:
          NODE_COUNT: 15

      - name: extra wait for CI split
        run: sleep 220

      - name: Have we had a section split?
        if: false
        id: splitSection
        run: ./scripts/has_split.sh

      - name: Try Relaunching network
        if: false # TODO, restore with: failure() && steps.splitSection.outcome == 'failure' && matrix.os != 'windows-latest'
        env:
          NODE_COUNT: "15" # TODO: change it back to 43 # (this should be a split section)
        run: |
          killall sn_node
          rm -rf ~/.safe/node
          ./target/release/testnet
          sleep 220
          ./scripts/has_split.sh

        # a catchall to ensure any new client api tests are run (ideally any major new section should have its own test run)
      - name: Initital client tests...
        shell: bash
        # always joinable not actually needed here, but should speed up compilation as we've just built with it
        run: timeout 15m cargo test --release --features=always-joinable,test-utils -- client_api --skip client_api::reg --skip client_api::blob --skip client_api::transfer && sleep 5

      - name: Client register_basics against local network
        shell: bash
        run: timeout 10m cargo test --release --features=always-joinable,test-utils -- register_basics && sleep 5

      - name: Client register_private_permissions against local network
        shell: bash
        run: timeout 10m cargo test --release --features=always-joinable,test-utils -- register_private_permissions && sleep 5

      - name: Client register_public_permissions against local network
        shell: bash
        run: timeout 10m cargo test --release --features=always-joinable,test-utils -- register_public_permissions && sleep 5

      - name: Client register_write against local network
        shell: bash
        run: timeout 10m cargo test --release --features=always-joinable,test-utils -- register_write && sleep 5

      - name: Client register_owner against local network
        shell: bash
        run: timeout 10m cargo test --release --features=always-joinable,test-utils -- register_owner && sleep 5

      - name: Client register_can_delete_private against local network
        shell: bash
        run: timeout 10m cargo test --release --features=always-joinable,test-utils -- register_can_delete_private && sleep 5

      - name: Client register_cannot_delete_public against local network
        shell: bash
        run: timeout 10m cargo test --release --features=always-joinable,test-utils -- register_cannot_delete_public && sleep 5

      - name: Client public_blob_test against local network
        shell: bash
        run: timeout 20m cargo test --release --features=always-joinable,test-utils -- public_blob_test --test-threads=2 && sleep 5

      - name: Client private_blob_test against local network
        shell: bash
        run: timeout 20m cargo test --release --features=always-joinable,test-utils -- private_blob_test --test-threads=2 && sleep 5

      - name: Client private_delete_large against local network
        shell: bash
        run: timeout 20m cargo test --release --features=always-joinable,test-utils -- private_delete_large --test-threads=2 && sleep 5

      - name: Client create_and_retrieve_1kb_pub_unencrypted against local network
        shell: bash
        run: timeout 20m cargo test --release --features=always-joinable,test-utils -- create_and_retrieve_1kb_pub_unencrypted --test-threads=2 && sleep 5

      - name: Client create_and_retrieve_1kb_private_unencrypted against local network
        shell: bash
        run: timeout 20m cargo test --release --features=always-joinable,test-utils -- create_and_retrieve_1kb_private_unencrypted --test-threads=2 && sleep 5

      - name: Client create_and_retrieve_1kb_put_pub_retrieve_private against local network
        shell: bash
        run: timeout 20m cargo test --release --features=always-joinable,test-utils -- create_and_retrieve_1kb_put_pub_retrieve_private --test-threads=2 && sleep 5

      - name: Client create_and_retrieve_1kb_put_private_retrieve_pub against local network
        shell: bash
        run: timeout 20m cargo test --release --features=always-joinable,test-utils -- create_and_retrieve_1kb_put_private_retrieve_pub --test-threads=2 && sleep 5

      - name: Client create_and_retrieve_1mb_public against local network
        shell: bash
        run: timeout 20m cargo test --release --features=always-joinable,test-utils -- create_and_retrieve_1mb_public --test-threads=2 && sleep 5

      - name: Client create_and_retrieve_1mb_private against local network
        shell: bash
        run: timeout 20m cargo test --release --features=always-joinable,test-utils -- create_and_retrieve_1mb_private --test-threads=2 && sleep 5

      - name: Client create_and_retrieve_10mb_private against local network
        shell: bash
        run: timeout 20m cargo test --release --features=always-joinable,test-utils -- create_and_retrieve_10mb_private --test-threads=2 && sleep 5

      - name: Client create_and_retrieve_10mb_public against local network
        shell: bash
        run: timeout 20m cargo test --release --features=always-joinable,test-utils -- create_and_retrieve_10mb_public --test-threads=2 && sleep 5

      - name: Client create_and_index_based_retrieve against local network
        shell: bash
        run: timeout 20m cargo test --release --features=always-joinable,test-utils -- create_and_index_based_retrieve --test-threads=2 && sleep 5

      - name: Run example app for Blob API against local network
        shell: bash
        run: timeout 10m cargo run --release  --features=always-joinable,test-utils --example client_blob

      - name: Kill the current network (next test doesnt need it)
        if: matrix.os != 'windows-latest'
        run: killall sn_node
        shell: bash

      - name: Kill the current network (next test doesnt need it)
        if: matrix.os == 'windows-latest'
        run: taskkill /IM sn_node.exe /F
        shell: cmd

      - name: Remove node dir and logs fo next test
        if: matrix.os == 'windows-latest'
        run: rd /s /q %USERPROFILE%\.safe\node
        shell: cmd

      - name: Remove node dir and logs fo next test
        if: matrix.os != 'windows-latest'
        run: rm -rf ~/.safe/node

      - name: Run example of split and chunk check
        if: false
        shell: bash
        run: timeout 15m cargo run --release  --features=always-joinable,test-utils --example network_split

      - name: Was there a section split?
        if: false
        run: ./scripts/has_split.sh

      - name: Are nodes still running nodes...
        if: failure() && matrix.os != 'windows-latest'
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"

      - name: Upload Node Logs
          # Upload artifacts.
        uses: actions/upload-artifact@master
        with:
          name: sn_node_logs
          path: $HOME/.safe/node/local-test-network/**
        if: failure()
