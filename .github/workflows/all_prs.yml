name: Standard PR Checks

on: pull_request

env:
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

jobs:
  checks:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Rustfmt-Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Install Rust and required components
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      # Cache.
      - name: Cargo cache registry, index and build
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-cache-${{ hashFiles('**/Cargo.lock') }}

      # Check if the code is formatted correctly.
      - name: Check formatting
        run: cargo fmt --all -- --check

      # Run Clippy.
      - shell: bash
        run: cargo clippy --all-targets


  # Run `cargo build` in the root directory to test all build scripts.
  build-script:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Build Scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Install Rust
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Cache.
      - name: Cargo cache registry, index and build
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-cache-${{ hashFiles('**/Cargo.lock') }}

      # Test build scripts.
      - name: Build
        run: cargo build

  build-script-arm:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        target: [arm-unknown-linux-musleabi, armv7-unknown-linux-musleabihf]
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cargo cache registry, index and build
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-cache-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross
        run: cargo install cross

      - name: Build ${{ matrix.target }} with cross
        run: cross build --release --target ${{ matrix.target }}

  cargo-udeps:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Unused dependency check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Install Rust and required components
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Run cargo-udeps
        uses: aig787/cargo-udeps-action@v1
        with:
          version: 'latest'
          args: '--all-targets'

  cargo-deny:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # wget the shared deny.toml file from the QA repo
    - shell: bash
      run: wget https://raw.githubusercontent.com/maidsafe/QA/master/misc-scripts/deny.toml

    - uses: EmbarkStudios/cargo-deny-action@v1

  check_pr_size:
      if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
      name: Check PR size doesn't break set limit
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - uses: maidsafe/pr_size_checker@v3
        with:
          max_lines_changed: 200

  # Test publish using --dry-run.
  test-publish:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Test Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Install Rust
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Publish Dry Run
        run: cargo publish --dry-run
