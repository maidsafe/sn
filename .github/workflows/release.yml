name: release

on:
  push:
    branches:
      - main

jobs:
  build:
    if: |
      github.repository_owner == 'maidsafe' &&
      startsWith(github.event.head_commit.message, 'chore(release):')
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: arm-unknown-linux-musleabi
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: stable
          override: true
      - shell: bash
        run: make gha-build-${{ matrix.target }}
      - uses: actions/upload-artifact@master
        with:
          name: safe_network-${{ matrix.target }}
          path: |
            artifacts
            !artifacts/.cargo-lock

  gh_release:
    if: |
      github.repository_owner == 'maidsafe' &&
      startsWith(github.event.head_commit.message, 'chore(release):')
    name: create github release
    runs-on: ubuntu-latest
    needs: [build]
    env:
      AWS_ACCESS_KEY_ID: AKIAVVODCRMSJ5MV63VB
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOY_USER_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-west-2
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@master
        with:
          name: safe_network-x86_64-pc-windows-msvc
          path: artifacts/prod/x86_64-pc-windows-msvc/release
      - uses: actions/download-artifact@master
        with:
          name: safe_network-x86_64-unknown-linux-musl
          path: artifacts/prod/x86_64-unknown-linux-musl/release
      - uses: actions/download-artifact@master
        with:
          name: safe_network-x86_64-apple-darwin
          path: artifacts/prod/x86_64-apple-darwin/release
      - uses: actions/download-artifact@master
        with:
          name: safe_network-arm-unknown-linux-musleabi
          path: artifacts/prod/arm-unknown-linux-musleabi/release
      - uses: actions/download-artifact@master
        with:
          name: safe_network-armv7-unknown-linux-musleabihf
          path: artifacts/prod/armv7-unknown-linux-musleabihf/release
      - uses: actions/download-artifact@master
        with:
          name: safe_network-aarch64-unknown-linux-musl
          path: artifacts/prod/aarch64-unknown-linux-musl/release

      - shell: bash
        run: |
          make clean-deploy
          make safe_network-package-version-artifacts-for-release
          make sn_cli-package-version-artifacts-for-release

      - shell: bash
        id: versioning
        run: |
          ./resources/scripts/output_versioning_info.sh

      - name: generate release description first pass
        shell: bash
        run: |
          ./resources/scripts/get_release_description.sh \
            "${{ steps.versioning.outputs.sn_version }}" \
            "${{ steps.versioning.outputs.sn_cli_version }}" > release_description.md

      # The second pass uses Python to extract the changelog entries for this version.
      # Python can easily do a string replace and avoid all the pain with newlines you get in Bash.
      # The script operates on the release_description.md that was generated in the previous step.
      - name: generate release description second pass
        shell: bash
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          if [[ $commit_message == *"safe_network"* ]]; then
            ./resources/scripts/insert_changelog_entry.py \
              --sn-version "${{ steps.versioning.outputs.sn_version }}"
          else
            sed "s/__SN_CHANGELOG_TEXT__/No changes for this release/g" -i release_description.md
          fi
          if [[ $commit_message == *"sn_api"* ]]; then
            ./resources/scripts/insert_changelog_entry.py \
              --sn-api-version "${{ steps.versioning.outputs.sn_api_version }}"
          else
            sed "s/__SN_API_CHANGELOG_TEXT__/No changes for this release/g" -i release_description.md
          fi
          if [[ $commit_message == *"sn_cli"* ]]; then
            ./resources/scripts/insert_changelog_entry.py \
              --sn-cli-version "${{ steps.versioning.outputs.sn_cli_version }}"
          else
            sed "s/__SN_CLI_CHANGELOG_TEXT__/No changes for this release/g" -i release_description.md
          fi

      - name: create github release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.versioning.outputs.gh_release_tag_name }}
          release_name: ${{ steps.versioning.outputs.gh_release_name }}
          draft: false
          prerelease: false
          body_path: release_description.md

      #
      # sn_node assets
      #
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.sn_version }}-x86_64-unknown-linux-musl.zip
          asset_name: sn_node-${{ steps.versioning.outputs.sn_version }}-x86_64-unknown-linux-musl.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.sn_version }}-x86_64-pc-windows-msvc.zip
          asset_name: sn_node-${{ steps.versioning.outputs.sn_version }}-x86_64-pc-windows-msvc.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.sn_version }}-x86_64-apple-darwin.zip
          asset_name: sn_node-${{ steps.versioning.outputs.sn_version }}-x86_64-apple-darwin.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.sn_version }}-arm-unknown-linux-musleabi.zip
          asset_name: sn_node-${{ steps.versioning.outputs.sn_version }}-arm-unknown-linux-musleabi.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.sn_version }}-armv7-unknown-linux-musleabihf.zip
          asset_name: sn_node-${{ steps.versioning.outputs.sn_version }}-armv7-unknown-linux-musleabihf.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.sn_version }}-aarch64-unknown-linux-musl.zip
          asset_name: sn_node-${{ steps.versioning.outputs.sn_version }}-aarch64-unknown-linux-musl.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.sn_version }}-x86_64-unknown-linux-musl.tar.gz
          asset_name: sn_node-${{ steps.versioning.outputs.sn_version }}-x86_64-unknown-linux-musl.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.sn_version }}-x86_64-pc-windows-msvc.tar.gz
          asset_name: sn_node-${{ steps.versioning.outputs.sn_version }}-x86_64-pc-windows-msvc.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.sn_version }}-x86_64-apple-darwin.tar.gz
          asset_name: sn_node-${{ steps.versioning.outputs.sn_version }}-x86_64-apple-darwin.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.sn_version }}-arm-unknown-linux-musleabi.tar.gz
          asset_name: sn_node-${{ steps.versioning.outputs.sn_version }}-arm-unknown-linux-musleabi.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.sn_version }}-armv7-unknown-linux-musleabihf.tar.gz
          asset_name: sn_node-${{ steps.versioning.outputs.sn_version }}-armv7-unknown-linux-musleabihf.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.sn_version }}-aarch64-unknown-linux-musl.tar.gz
          asset_name: sn_node-${{ steps.versioning.outputs.sn_version }}-aarch64-unknown-linux-musl.tar.gz
          asset_content_type: application/zip

      #
      # safe assets
      #
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-x86_64-unknown-linux-musl.zip
          asset_name: sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-x86_64-unknown-linux-musl.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-x86_64-pc-windows-msvc.zip
          asset_name: sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-x86_64-pc-windows-msvc.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-x86_64-apple-darwin.zip
          asset_name: sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-x86_64-apple-darwin.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-arm-unknown-linux-musleabi.zip
          asset_name: sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-arm-unknown-linux-musleabi.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-armv7-unknown-linux-musleabihf.zip
          asset_name: sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-armv7-unknown-linux-musleabihf.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-aarch64-unknown-linux-musl.zip
          asset_name: sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-aarch64-unknown-linux-musl.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-x86_64-unknown-linux-musl.tar.gz
          asset_name: sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-x86_64-unknown-linux-musl.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-x86_64-pc-windows-msvc.tar.gz
          asset_name: sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-x86_64-pc-windows-msvc.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-x86_64-apple-darwin.tar.gz
          asset_name: sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-x86_64-apple-darwin.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-arm-unknown-linux-musleabi.tar.gz
          asset_name: sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-arm-unknown-linux-musleabi.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-armv7-unknown-linux-musleabihf.tar.gz
          asset_name: sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-armv7-unknown-linux-musleabihf.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-aarch64-unknown-linux-musl.tar.gz
          asset_name: sn_cli-${{ steps.versioning.outputs.sn_cli_version }}-aarch64-unknown-linux-musl.tar.gz
          asset_content_type: application/zip

  # At first glance, it seems like it would be possible to check the commit message in the `if` condition
  # for the presence of the crate name, by using `contains`. However, this doesn't work, so the commit
  # message needs to be checked at the point of publishing. The reason is because of the dependencies
  # between the publishing jobs. If one of the jobs doesn't run because its `if` condition was evaluated
  # to false, the next job won't run, regardless of whether its `if` condition would evaluate to true.
  publish_sn:
    name: publish safe network
    runs-on: ubuntu-latest
    needs: [gh_release]
    if: |
      github.repository_owner == 'maidsafe' &&
      startsWith(github.event.head_commit.message, 'chore(release):')
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: cargo login
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}
      - name: cargo publish
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          if [[ $commit_message == *"safe_network"* ]]; then
            # The safe_network crate doesn't have any dependencies so we can go ahead and publish
            cd sn && cargo publish --allow-dirty
          fi

  publish_sn_api:
    name: publish sn_api
    runs-on: ubuntu-latest
    needs: [publish_sn]
    if: |
      github.repository_owner == 'maidsafe' &&
      startsWith(github.event.head_commit.message, 'chore(release):')
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - shell: bash
        id: versioning
        run: |
          ./resources/scripts/output_versioning_info.sh
      - name: cargo login
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}
      - name: cargo publish
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          if [[ $commit_message == *"sn_api"* ]]; then
            # The sn_api crate is dependent on safe_network and sometimes the new version doesn't
            # become available on crates.io immediately, so this script will use a retry loop.
            ./resources/scripts/publish_crate.sh \
              "sn_api" "${{ steps.versioning.outputs.sn_version }}" "safe_network"
          fi
