name: 'workspace: release'

on:
  push:
    branches:
      - main

jobs:
  build:
    if: github.repository_owner == 'maidsafe'
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: arm-unknown-linux-musleabi
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: stable
          override: true
      - shell: bash
        run: make gha-build-${{ matrix.target }}
      - uses: actions/upload-artifact@master
        with:
          name: safe_network-${{ matrix.target }}
          path: artifacts

  gh_release:
    if: |
      github.repository_owner == 'maidsafe' &&
      startsWith(github.event.head_commit.message, 'chore(release):')
    name: create github release
    runs-on: ubuntu-latest
    needs: [build]
    env:
      AWS_ACCESS_KEY_ID: AKIAVVODCRMSJ5MV63VB
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOY_USER_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-west-2
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@master
        with:
          name: safe_network-x86_64-pc-windows-msvc
          path: artifacts/prod/x86_64-pc-windows-msvc/release
      - uses: actions/download-artifact@master
        with:
          name: safe_network-x86_64-unknown-linux-musl
          path: artifacts/prod/x86_64-unknown-linux-musl/release
      - uses: actions/download-artifact@master
        with:
          name: safe_network-x86_64-apple-darwin
          path: artifacts/prod/x86_64-apple-darwin/release
      - uses: actions/download-artifact@master
        with:
          name: safe_network-arm-unknown-linux-musleabi
          path: artifacts/prod/arm-unknown-linux-musleabi/release
      - uses: actions/download-artifact@master
        with:
          name: safe_network-armv7-unknown-linux-musleabihf
          path: artifacts/prod/armv7-unknown-linux-musleabihf/release
      - uses: actions/download-artifact@master
        with:
          name: safe_network-aarch64-unknown-linux-musl
          path: artifacts/prod/aarch64-unknown-linux-musl/release

      - shell: bash
        run: make safe_network-package-version-artifacts-for-release

      - shell: bash
        id: versioning
        run: |
          version=$(grep "^version" < sn/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          echo "::set-output name=version::$version"

      - name: generate release description first pass
        shell: bash
        run: |
          ./resources/scripts/get_release_description.sh "${{ steps.versioning.outputs.version }}" > release_description.md

      # The second pass uses Python to extract the changelog entries for this version.
      # Python can easily do a string replace and avoid all the pain with newlines you get in Bash.
      # The script operates on the release_description.md that was generated in the previous step.
      - name: generate release description second pass
        shell: bash
        run: |
          ./resources/scripts/insert_changelog_entry.py "${{ steps.versioning.outputs.version }}"

      - name: create github release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.versioning.outputs.version }}
          release_name: Safe Network v${{ steps.versioning.outputs.version }}
          draft: false
          prerelease: false
          body_path: release_description.md

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-x86_64-unknown-linux-musl.zip
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-x86_64-unknown-linux-musl.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-x86_64-pc-windows-msvc.zip
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-x86_64-pc-windows-msvc.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-x86_64-apple-darwin.zip
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-x86_64-apple-darwin.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-arm-unknown-linux-musleabi.zip
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-arm-unknown-linux-musleabi.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-armv7-unknown-linux-musleabihf.zip
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-armv7-unknown-linux-musleabihf.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-aarch64-unknown-linux-musl.zip
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-aarch64-unknown-linux-musl.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-x86_64-unknown-linux-musl.tar.gz
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-x86_64-unknown-linux-musl.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-x86_64-pc-windows-msvc.tar.gz
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-x86_64-pc-windows-msvc.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-x86_64-apple-darwin.tar.gz
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-x86_64-apple-darwin.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-arm-unknown-linux-musleabi.tar.gz
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-arm-unknown-linux-musleabi.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-armv7-unknown-linux-musleabihf.tar.gz
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-armv7-unknown-linux-musleabihf.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-aarch64-unknown-linux-musl.tar.gz
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-aarch64-unknown-linux-musl.tar.gz
          asset_content_type: application/zip

  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: [gh_release]
    if: |
      github.repository_owner == 'maidsafe' &&
      startsWith(github.event.head_commit.message, 'chore(release):')
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: cargo login
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}
      - name: cargo publish
        run: cd sn && cargo publish --allow-dirty
