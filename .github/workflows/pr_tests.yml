name: Run All Tests

on: pull_request

env:
  # Turn on backtrace as needed. Generally (passing) CI should not need this.
  # RUST_BACKTRACE: 1
  # Deny all compiler warnings.
  RUSTFLAGS: "-D warnings"
  SAFE_AUTH_PASSPHRASE: "x"
  SAFE_AUTH_PASSWORD: "y"

jobs:
  changes:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Identify affected modules
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ toJSON(steps.changes.outputs) }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          messaging:
            - 'src/messaging/**'
            - 'src/types/**'
          node:
            - 'src/node/**'
            - 'src/routing/**'
            - 'src/messaging/**'
            - 'src/types/**'
            - 'src/dbs/**'
            - 'src/prefix_map/**'
            - 'src/url/**'
          client:
            - 'src/client/**'
            - 'src/messaging/**'
            - 'src/types/**'
            - 'src/dbs/**'
            - 'src/prefix_map/**'
            - 'src/url/**'
          routing:
            - 'src/routing/**'
            - 'src/messaging/**'
            - 'src/types/**'
            - 'src/prefix_map/**'
          url:
            - 'src/url/**'
          data_types:
            - 'src/types/**'
          dbs:
            - 'src/dbs/**'
          prefix_map:
            - 'src/prefix_map/**'

  # Use a separate build job so that cache is saved even if tests fail (as long as build succeeds)
  build:
    name: Build
    needs: changes
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    outputs:
      # GHA doesn't allow dependencies on a specific job in a matrix, and we can't interpolate into
      # keys, so we have to specify them all...
      ubuntu-latest_lib_tests: ${{ steps.build.outputs['ubuntu-latest_lib_tests'] }}
      ubuntu-latest_testnet_bin: ${{ steps.build.outputs['ubuntu-latest_testnet_bin'] }}
      ubuntu-latest_client_blob_bin: ${{ steps.build.outputs['ubuntu-latest_client_blob_bin'] }}
      windows-latest_lib_tests: ${{ steps.build.outputs['windows-latest_lib_tests'] }}
      windows-latest_testnet_bin: ${{ steps.build.outputs['windows-latest_testnet_bin'] }}
      windows-latest_client_blob_bin: ${{ steps.build.outputs['windows-latest_client_blob_bin'] }}
      macos-latest_lib_tests: ${{ steps.build.outputs['macos-latest_lib_tests'] }}
      macos-latest_testnet_bin: ${{ steps.build.outputs['macos-latest_testnet_bin'] }}
      macos-latest_client_blob_bin: ${{ steps.build.outputs['macos-latest_client_blob_bin'] }}
    steps:
    - name: Install Rust
      id: toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - uses: actions/checkout@v2

    # Remove safe_network version from Cargo.lock to maintain cache across versions
    - name: Prepare cache key
      id: cache_key
      run: |
        cat Cargo.lock \
          | sed -e '/^name = "safe_network"/ {' -e 'n;d' -e '}' \
          > Cargo.cache-key
      shell: bash

    - name: Cargo cache registry, index and build
      uses: actions/cache@v2.1.4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-cargo-cache-${{ hashFiles('Cargo.cache-key') }}

    - name: Build all safe_network targets
      id: build
      run: |
        output="$(cargo build --all-targets --message-format=json --release --features=always-joinable,test-utils)"
        lib_tests="$(echo "$output" | jq -r 'select(.target.name == "safe_network" and .executable != null).executable')"
        testnet_bin="$(echo "$output" | jq -r 'select(.target.name == "testnet" and .executable != null and (.profile.test | not)).executable')"
        client_blob_bin="$(echo "$output" | jq -r 'select(.target.name == "client_blob").executable')"

        echo "::set-output name=${{ matrix.os }}_lib_tests::$lib_tests"
        echo "::set-output name=${{ matrix.os }}_testnet_bin::$testnet_bin"
        echo "::set-output name=${{ matrix.os }}_client_blob_bin::$client_blob_bin"
      shell: bash

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: target
        path: |
          ${{ steps.build.outputs[format('{0}_lib_tests', matrix.os)] }}
          ${{ steps.build.outputs[format('{0}_testnet_bin', matrix.os)] }}
          ${{ steps.build.outputs[format('{0}_client_blob_bin', matrix.os)] }}

  tests:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Run all test categories
    needs: [changes, build]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Mac setup timeout
        if: matrix.os == 'macos-latest'
        run: |
          brew install coreutils
          alias timeout=gtimeout

      - name: Mac install ripgrep
        if: matrix.os == 'macos-latest'
        run: brew install ripgrep

      - name: ubuntu install ripgrep
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get -y install ripgrep

      - name: windows install ripgrep
        if: matrix.os == 'windows-latest'
        run: choco install ripgrep

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: target

      - name: Run Data Types tests
        if: fromJSON(needs.changes.outputs.changes).data_types == 'true'
        run: ${{ needs.build.outputs[format('{0}_lib_tests', matrix.os)] }} types

      - name: Run DBs tests
        if: fromJSON(needs.changes.outputs.changes).dbs == 'true'
        run: ${{ needs.build.outputs[format('{0}_lib_tests', matrix.os)] }} dbs

      - name: Run PrefixMap tests
        if: fromJSON(needs.changes.outputs.changes).prefix_map == 'true'
        run: ${{ needs.build.outputs[format('{0}_lib_tests', matrix.os)] }} prefix_map

      - name: Run URL tests
        if: fromJSON(needs.changes.outputs.changes).url == 'true'
        run: ${{ needs.build.outputs[format('{0}_lib_tests', matrix.os)] }} url

      - name: Run Messaging tests
        if: fromJSON(needs.changes.outputs.changes).messaging == 'true'
        run: ${{ needs.build.outputs[format('{0}_lib_tests', matrix.os)] }} messaging

      - name: Run Node tests
        if: fromJSON(needs.changes.outputs.changes).node == 'true'
        run: ${{ needs.build.outputs[format('{0}_lib_tests', matrix.os)] }} node

      - name: Run Routing tests
        if: fromJSON(needs.changes.outputs.changes).routing == 'true'
        run: ${{ needs.build.outputs[format('{0}_lib_tests', matrix.os)] }} routing

      - name: Launch testnet
        run: ${{ needs.build.outputs[format('{0}_testnet_bin', matrix.os)] }}
        env:
          NODE_COUNT: 43

      - name: Was there a section split?
        run: ./scripts/has_split.sh
        id: split-check-1

      - name: Kill Section if no split (unix)
        if: matrix.os != 'windows-latest' && steps.split-check-1.outcome == 'failure' 
        run: killall sn_node
      
      - name: Kill section if no split (win)
        if: matrix.os == 'windows-latest' && steps.split-check-1.outcome == 'failure'
        shell: cmd 
        run: taskkill /IM sn_node.exe /F

      - name: Restart testnet if no split
        if: steps.split-check-1.outcome == 'failure' 
        run: ${{ needs.build.outputs[format('{0}_testnet_bin', matrix.os)] }}
        env:
          NODE_COUNT: 43

      - name: Was there a section split?
        run: ./scripts/has_split.sh
        id: split-check-2

      # a catchall to ensure any new client api tests are run (ideally any major new section should have its own test run)
      - name: Initial client tests...
        shell: bash
        # always joinable not actually needed here, but should speed up compilation as we've just built with it
        run: timeout 5m ${{ needs.build.outputs[format('{0}_lib_tests', matrix.os)] }} client_api --skip client_api::reg --skip client_api::blob && sleep 5

      # register api
      - name: Client reg tests against local network
        shell: bash
        run: timeout 10m ${{ needs.build.outputs[format('{0}_lib_tests', matrix.os)] }} client_api::reg --test-threads=1 && sleep 5
      
      # blob api
      - name: Client blob tests against local network
        shell: bash
        run: timeout 10m ${{ needs.build.outputs[format('{0}_lib_tests', matrix.os)] }} client_api::blob --test-threads=1 && sleep 5
      
      - name: Run example app for Blob API against local network
        shell: bash
        run: timeout 5m ${{ needs.build.outputs[format('{0}_client_blob_bin', matrix.os)] }}

      - name: Kill the current network (not needed for next test)
        if: matrix.os != 'windows-latest'
        run: |
          killall sn_node
          rm -rf ~/.safe/node
        shell: bash

      - name: Kill the current network (not needed for next test)
        if: matrix.os == 'windows-latest'
        run: |
          taskkill /IM sn_node.exe /F
          rd /s /q %USERPROFILE%\.safe\node
        shell: cmd

      # - name: Remove node dir and logs for next test
      #   if: matrix.os == 'windows-latest'
      #   run: rd /s /q %USERPROFILE%\.safe\node
      #   shell: cmd

      # - name: Remove node dir and logs for next test
      #   if: matrix.os != 'windows-latest'
      #   run: rm -rf ~/.safe/node

      # - name: Run example of split and chunk check
      #   shell: bash
      #   run: timeout 10m cargo run --release  --features=always-joinable,test-utils --example network_split

      # - name: Was there a section split?
      #   run: ./scripts/has_split.sh

      - name: Are nodes still running...?
        if: failure() && matrix.os != 'windows-latest'
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"

      - name: Upload Node Logs
          # Upload artifacts.
        uses: actions/upload-artifact@master
        with:
          name: sn_node_logs
          path: $HOME/.safe/node/local-test-network/**
        if: failure()
