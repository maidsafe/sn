name: PR Tests

on: pull_request

env:
  # Turn on backtrace as needed. Generally (passing) CI should not need this.
  # RUST_BACKTRACE: 1
  # Deny all compiler warnings.
  RUSTFLAGS: "-D warnings"
  RUST_LOG: "safe_network=trace"
  SAFE_AUTH_PASSPHRASE: "x"
  SAFE_AUTH_PASSWORD: "y"
  NODE_COUNT: 11
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'eu-west-2'

jobs:
  build:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Build sn bins
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      # Install Rust
      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: Build sn bins
        # all = all crates in workspace, lib/bins targets, with these features...
        run: cargo build -p safe_network --release --features=test-utils,always-joinable --bins
        timeout-minutes: 60


  unit:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Run all relevant unit test categories
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            messaging:
              - 'sn/src/messaging/**'
              - 'sn/src/types/**'
            node:
              - 'sn/src/node/**'
              - 'sn/src/routing/**'
              - 'sn/src/messaging/**'
              - 'sn/src/types/**'
              - 'sn/src/dbs/**'
              - 'sn/src/prefix_map/**'
              - 'sn/src/url/**'
            client:
              - 'sn/src/client/**'
              - 'sn/src/messaging/**'
              - 'sn/src/types/**'
              - 'sn/src/dbs/**'
              - 'sn/src/prefix_map/**'
              - 'sn/src/url/**'
            routing:
              - 'sn/src/routing/**'
              - 'sn/src/messaging/**'
              - 'sn/src/types/**'
              - 'sn/src/prefix_map/**'
            types:
              - 'sn/src/types/**'
            dbs:
              - 'sn/src/dbs/**'
            prefix_map:
              - 'sn/src/prefix_map/**'

      # Install Rust
      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: Build all test targets
        # all = all crates in workspace, lib/bins targets, with these features...
        run: cd sn && cargo test --no-run --release --features=test-utils

      - name: Run Data Types tests
        if: steps.changes.outputs.types == 'true'
        run: cargo test --lib --release --features=test-utils -- types
        timeout-minutes: 10

      - name: Run DBs tests
        if: steps.changes.outputs.dbs == 'true'
        run: cargo test --lib --release --features=test-utils -- dbs
        timeout-minutes: 5

      - name: Run PrefixMap tests
        if: steps.changes.outputs.prefix_map == 'true'
        run: cargo test --lib --release --features=test-utils -- prefix_map
        timeout-minutes: 5

      - name: Run Messaging tests
        if: steps.changes.outputs.messaging == 'true'
        run: cargo test --lib --release --features=test-utils -- messaging
        timeout-minutes: 5

      - name: Run Node tests
        if: steps.changes.outputs.node == 'true'
        run: cargo test --lib --release --features=test-utils -- node
        timeout-minutes: 5

      - name: Run Routing tests
        if: steps.changes.outputs.routing == 'true'
        run: cargo test --lib --release --features=test-utils -- routing
        timeout-minutes: 10

  e2e:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Run e2e tests
    runs-on: ${{ matrix.os }}
    needs: ["build"]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      # Install Rust
      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: Start the network
        run: ./target/release/testnet
        id: section-startup

      - name: Print Network Log Stats at start
        shell: bash
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success' && matrix.os != 'windows-latest'

      - name: Build all safe_network tests
        run: cd sn && cargo test --no-run --release --features=always-joinable,test-utils
        timeout-minutes: 60

      - name: Run network asserts one by one
        shell: bash
        # here test-threads=1 is important so we dont pollute log counts by running tests in parallel
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- --ignored network_assert --test-threads=1 --skip health && sleep 5
        timeout-minutes: 7
        continue-on-error: true

      # a catchall to ensure any new client api tests are run (ideally any major new section should have its own test run)
      - name: Initial client tests...
        shell: bash
        # always joinable not actually needed here, but should speed up compilation as we've just built with it
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- client --skip client_api::reg --skip client_api::blob && sleep 5
        timeout-minutes: 5

      # register api
      - name: Client reg tests against local network
        shell: bash
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- client_api::reg --skip ae && sleep 5
        timeout-minutes: 10

      # blob api
      - name: client blob tests against local network
        shell: bash
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- client_api::blob --skip ae  && sleep 5
        timeout-minutes: 10


      # ae tests api
      - name: client ae tests against local network
        shell: bash
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- ae_checks  && sleep 5
        timeout-minutes: 10
        env:
          SN_AE_WAIT: 10

      - name: Run example app for Blob API against local network
        timeout-minutes: 10
        shell: bash
        run: cd sn && cargo run  --release  --features=always-joinable,test-utils --example client_blob

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        if: failure() && matrix.os != 'windows-latest'
        continue-on-error: true
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Print Network Log Stats
        shell: bash
        continue-on-error: true
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success' &&  matrix.os != 'windows-latest'

      - name: Upload Node Logs to AWS
          # Upload artifacts.
        run: aws s3 sync ~/.safe/node/local-test-network/ s3://safe-network-ci-logs/${{github.sha}}/${{ github.run_id }}-${{ github.run_number }}/${{matrix.os}}
        if: failure()
        continue-on-error: true

      - name: Upload Node Logs
          # Upload artifacts.
        uses: actions/upload-artifact@v2
        with:
          name: sn_node_logs
          path: ~/.safe/node/local-test-network/**/*.log*
        if: failure()
        continue-on-error: true


  api:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Run api tests
    needs: ["build"]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      # Install Rust
      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: Start the network
        run: ./target/release/testnet
        id: section-startup

      - name: Print Network Log Stats at start
        shell: bash
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success' && matrix.os != 'windows-latest'

      - name: Build all sn_api tests
        run: cargo test --no-run -p sn_api --release --lib

      - name: Run sn_api tests
        shell: bash
        run: ./resources/scripts/api_tests.sh
        timeout-minutes: 50
        env:
          # these api tests realy heavily on retry_loop at the moment
          # TODO: Remove that dependency
          SN_QUERY_TIMEOUT: 20 # 20 secs
          SN_AE_WAIT: 1 # 1 sec

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        if: failure() && matrix.os
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Print Network Log Stats
        shell: bash
        continue-on-error: true
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success'

      - name: Upload Node Logs to AWS
          # Upload artifacts.
        run: aws s3 sync ~/.safe/node/local-test-network/ s3://safe-network-ci-logs/${{github.sha}}/${{ github.run_id }}-${{ github.run_number }}/${{matrix.os}}
        if: failure()
        continue-on-error: true

      - name: Upload Node Logs
          # Upload artifacts.
        uses: actions/upload-artifact@v2
        with:
          name: sn_node_logs
          path: ~/.safe/node/local-test-network/**/*.log*
        if: failure()
        continue-on-error: true
