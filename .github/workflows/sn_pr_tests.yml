name: PR Tests

on: pull_request

env:
  # Turn on backtrace as needed. Generally (passing) CI should not need this.
  # RUST_BACKTRACE: 1
  # Deny all compiler warnings.
  RUSTFLAGS: "-D warnings"
  RUST_LOG: "safe_network=trace"
  SAFE_AUTH_PASSPHRASE: "x"
  SAFE_AUTH_PASSWORD: "y"
  SN_CLIENT_QUERY_TIMEOUT: 270
  NODE_COUNT: 45
  SN_ELDER_COUNT: 5
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'eu-west-2'

jobs:
  tests:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Run all test categories
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            messaging:
              - 'sn/src/messaging/**'
              - 'sn/src/types/**'
            node:
              - 'sn/src/node/**'
              - 'sn/src/routing/**'
              - 'sn/src/messaging/**'
              - 'sn/src/types/**'
              - 'sn/src/dbs/**'
              - 'sn/src/prefix_map/**'
              - 'sn/src/url/**'
            client:
              - 'sn/src/client/**'
              - 'sn/src/messaging/**'
              - 'sn/src/types/**'
              - 'sn/src/dbs/**'
              - 'sn/src/prefix_map/**'
              - 'sn/src/url/**'
            routing:
              - 'sn/src/routing/**'
              - 'sn/src/messaging/**'
              - 'sn/src/types/**'
              - 'sn/src/prefix_map/**'
            types:
              - 'sn/src/types/**'
            dbs:
              - 'sn/src/dbs/**'
            prefix_map:
              - 'sn/src/prefix_map/**'

      - name: Mac install ripgrep
        if: matrix.os == 'macos-latest'
        run: brew install ripgrep

      - name: ubuntu install ripgrep
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get -y install ripgrep

      - name: windows install ripgrep
        if: matrix.os == 'windows-latest'
        run: choco install ripgrep

      # Install Rust
      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      # - name: Cargo cache registry, index and build
      #   uses: actions/cache@v2.1.4
      #   with:
      #     path: |
      #       ~/.cargo/registry
      #       ~/.cargo/git
      #       target
      #     key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-cargo-cache-${{ hashFiles('**/Cargo.lock') }}-${{ github.job }}

      - name: Build all safe_network targets
        run: cd sn && cargo build --all-targets --release --features=always-joinable,test-utils

      - name: run sn_cli unit tests (no running network is necessary)
        run: cargo test --release --bin safe

      - name: Run Data Types tests
        if: steps.changes.outputs.types == 'true'
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- types
        timeout-minutes: 10

      - name: Run DBs tests
        if: steps.changes.outputs.dbs == 'true'
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- dbs
        timeout-minutes: 5

      - name: Run PrefixMap tests
        if: steps.changes.outputs.prefix_map == 'true'
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- prefix_map
        timeout-minutes: 5

      - name: Run Messaging tests
        if: steps.changes.outputs.messaging == 'true'
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- messaging
        timeout-minutes: 5

      - name: Run Node tests
        if: steps.changes.outputs.node == 'true'
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- node
        timeout-minutes: 5

      - name: Run Routing tests
        if: steps.changes.outputs.routing == 'true'
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- routing
        timeout-minutes: 10

      - name: Start the network
        run: ./target/release/testnet
        id: section-startup

      - name: Print Network Log Stats at start
        shell: bash
        run: cd sn && cargo run --bin log_cmds_inspector --release --features=always-joinable,test-utils $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success' && matrix.os != 'windows-latest'

      - name: Healthcheck
        run: ./resources/scripts/has_split.sh
        shell: bash
        timeout-minutes: 1
        continue-on-error: true

      - name: Wait for a healthy network
        shell: bash
        if: matrix.os != 'windows-latest'
        run: ./resources/scripts/network_is_ready.sh
        timeout-minutes: 5

      - name: Wait for a healthy network (win)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: ./resources/scripts/network_is_ready_cli.sh
        timeout-minutes: 5


      - name: Run network asserts one by one
        shell: bash
        # here test-threads=1 is important so we dont pollute log counts by running tests in parallel
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- --ignored network_assert --test-threads=1 --skip health && sleep 5
        timeout-minutes: 7
        continue-on-error: true


      # a catchall to ensure any new client api tests are run (ideally any major new section should have its own test run)
      - name: Initial client tests...
        shell: bash
        # always joinable not actually needed here, but should speed up compilation as we've just built with it
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- client --skip client_api::reg --skip client_api::blob && sleep 5
        timeout-minutes: 15

      # register api
      - name: Client reg tests against local network
        shell: bash
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- client_api::reg && sleep 5
        timeout-minutes: 20

      # blob api unix
      - name: Unix client blob tests against local network
        shell: bash
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- client_api::blob && sleep 5
        timeout-minutes: 15

      - name: Run example app for Blob API against local network
        timeout-minutes: 10
        shell: bash
        run: cd sn && cargo run --release  --features=always-joinable,test-utils --example client_blob


      # - name: Kill the current network (not needed for next test)
      #   if: matrix.os != 'windows-latest'
      #   run: |
      #     killall sn_node
      #     rm -rf ~/.safe/node
      #   shell: bash

      # - name: Kill the current network (not needed for next test)
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     taskkill /IM sn_node /F
      #     rd /s /q %USERPROFILE%\.safe\node
      #   shell: cmd

      # - name: Remove node dir and logs for next test
      #   if: matrix.os == 'windows-latest'
      #   run: rd /s /q %USERPROFILE%\.safe\node
      #   shell: cmd

      # - name: Remove node dir and logs for next test
      #   if: matrix.os != 'windows-latest'
      #   run: rm -rf ~/.safe/node

      # - name: Run example of split and chunk check
      #   shell: bash
      #   run: cargo run --release  --features=always-joinable,test-utils --example network_split
      #   timeout-minutes: 5

      # - name: Was there a section split?
      #   run: ./resources/scripts/has_split.sh

      - name: Run sn_api tests
        shell: bash
        run: ./resources/scripts/api_tests.sh
        timeout-minutes: 50

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        if: failure() && matrix.os
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Kill the current network (not needed for next test)
        if: matrix.os == 'windows-latest'
        run: |
          taskkill /IM sn_node /F
          rd /s /q %USERPROFILE%\.safe\node
        shell: cmd


      - name: Print Network Log Stats
        shell: bash
        run: cd sn && cargo run --bin log_cmds_inspector --release --features=always-joinable,test-utils $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success'


      - name: Upload Node Logs to AWS
          # Upload artifacts.
        run: aws s3 sync ~/.safe/node/local-test-network/ s3://safe-network-ci-logs/${{github.sha}}/${{ github.run_id }}-${{ github.run_number }}/${{matrix.os}}
        if: failure()

      - name: Upload Node Logs
          # Upload artifacts.
        uses: actions/upload-artifact@v2
        with:
          name: sn_node_logs
          path: ~/.safe/node/local-test-network/**/*.log*
        if: failure()
