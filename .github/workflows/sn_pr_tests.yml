name: PR Tests

on: pull_request

env:
  RUSTFLAGS: "-D warnings"
  SAFE_AUTH_PASSPHRASE: "x"
  SAFE_AUTH_PASSWORD: "y"
  NODE_COUNT: 15
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'eu-west-2'

jobs:
  unit:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}-unit

      - name: Build all test targets
        # all = all crates in workspace, lib/bins targets, with these features...
        run: cargo test --no-run --release --features=test-utils
        working-directory: sn

      - name: Run unit tests
        uses: jacderida/cargo-nextest@main
        with:
          test-run-name: unit-tests-${{ matrix.os }}
          profile: ci
          junit-path: junit.xml
          package: safe_network
          release: true
          features: test-utils
          filters: "dbs messaging node prefix_map routing types"

      - name: Run CLI unit tests
        uses: jacderida/cargo-nextest@main
        with:
          test-run-name: cli-unit-tests-${{ matrix.os }}
          profile: ci
          junit-path: junit.xml
          package: sn_cli
          bin: safe
          release: true

  e2e:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: E2E tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: Mac install ripgrep
        if: matrix.os == 'macos-latest'
        run: brew install ripgrep

      - name: ubuntu install ripgrep
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get -y install ripgrep

      - name: windows install ripgrep
        if: matrix.os == 'windows-latest'
        run: choco install ripgrep

      - name: Build sn bins
        run: cd sn && cargo build --release --features=test-utils --bins
        timeout-minutes: 60

      - name: Build all safe_network tests
        run: cd sn && cargo test --no-run --release --features=test-utils
        timeout-minutes: 60

      - name: Build testnet
        run: cargo build  --release --bin testnet
        timeout-minutes: 60

      - name: Build log_cmds_inspector
        run: cargo build  --release --bin log_cmds_inspector
        timeout-minutes: 60

      - name: Start the network
        run: ./target/release/testnet
        id: section-startup
        env:
          RUST_LOG: "safe_network,sn_api,sn_node=trace"

      - name: Print Network Log Stats at start
        shell: bash
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success' && matrix.os != 'windows-latest'

      - name: Wait for all nodes to join
        shell: bash
        run: ./resources/scripts/wait_for_nodes_to_join.sh
        timeout-minutes: 10

      - name: Print Network Log Stats after nodes joined
        shell: bash
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success' && matrix.os != 'windows-latest'

      - name: Run client tests
        uses: jacderida/cargo-nextest@main
        with:
          test-run-name: e2e-client-${{ matrix.os }}
          profile: ci
          junit-path: junit.xml
          package: safe_network
          release: true
          features: test-utils
          filters: client
          test-threads: 2
        timeout-minutes: 25

      - name: Run AE tests
        uses: jacderida/cargo-nextest@main
        with:
          test-run-name: e2e-ae-${{ matrix.os }}
          profile: ci
          junit-path: junit.xml
          package: safe_network
          release: true
          features: test-utils
          filters: ae_checks
          test-threads: 2
        timeout-minutes: 15
        env:
          SN_AE_WAIT: 10

      - name: Run example app for file API against local network
        timeout-minutes: 10
        shell: bash
        run: cd sn && cargo run  --release  --features=test-utils --example client_files

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        if: failure() && matrix.os != 'windows-latest'
        continue-on-error: true
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Print Network Log Stats
        shell: bash
        continue-on-error: true
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success' &&  matrix.os != 'windows-latest'

      - name: Upload Node Logs to AWS for Windowns
        run: aws s3 sync C:\Users\runneradmin\.safe\node\local-test-network\ s3://safe-network-ci-logs/${{github.sha}}/${{ github.run_id }}-${{ github.run_number }}/${{matrix.os}}
        if: failure() &&  matrix.os == 'windows-latest'
        continue-on-error: true

      - name: Upload Node Logs to AWS for Non-Windows
        run: aws s3 sync ~/.safe/node/local-test-network/ s3://safe-network-ci-logs/${{github.sha}}/${{ github.run_id }}-${{ github.run_number }}/${{matrix.os}}
        if: failure() &&  matrix.os != 'windows-latest'
        continue-on-error: true

      - name: Upload Node Logs
        uses: actions/upload-artifact@v2
        with:
          name: sn_node_logs_e2e_${{matrix.os}}
          path: ~/.safe/node/local-test-network/**/*.log*
        if: failure()
        continue-on-error: true

      # if we don't clean up, the .safe folder might persist between runs
      - name: Cleanup self-hosted runner
        if: matrix.os == 'ubuntu-latest' && always()
        run: |
          rm -rf ~/.safe
          killall -9 sn_node

  e2e-split:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: E2E tests w/ full network
    runs-on: self-hosted-ubuntu
    env:
      NODE_COUNT: 33
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: ubuntu install ripgrep
        run: sudo apt-get -y install ripgrep

      - name: Build sn bins
        run: cd sn && cargo build --release --features=test-utils --bins
        timeout-minutes: 60

      - name: Build all safe_network tests
        run: cd sn && cargo test --no-run --release --features=test-utils
        timeout-minutes: 60

      - name: Build testnet
        run: cargo build  --release --bin testnet
        timeout-minutes: 60

      - name: Build log_cmds_inspector
        run: cargo build  --release --bin log_cmds_inspector
        timeout-minutes: 60

      # This starts a 30 node network
      - name: Run network split data integrity test
        timeout-minutes: 30
        shell: bash
        run: cargo run --release --features=test-utils --example network_split

      # - name: Start the network
      #   run: ./target/release/testnet
      #   id: section-startup

      - name: Print Network Log Stats at start
        shell: bash
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome

      - name: Wait for all nodes to join
        shell: bash
        # we should not have the full 33 nodes as yet.
        run: NODE_COUNT=28 ./resources/scripts/wait_for_nodes_to_join.sh
        timeout-minutes: 10

      - name: Is the network split and ready?
        shell: bash
        run: ./resources/scripts/network_is_ready.sh
        timeout-minutes: 5

      - name: Print Network Log Stats after nodes joined
        shell: bash
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network

      - name: Run client tests
        uses: jacderida/cargo-nextest@main
        with:
          test-run-name: e2e-split-client-self-hosted-ubuntu
          profile: ci
          junit-path: junit.xml
          package: safe_network
          release: true
          features: test-utils
          filters: client
          test-threads: 2
        timeout-minutes: 25

      - name: Run AE tests
        uses: jacderida/cargo-nextest@main
        with:
          test-run-name: e2e-split-ae-self-hosted-ubuntu
          profile: ci
          junit-path: junit.xml
          package: safe_network
          release: true
          features: test-utils
          filters: ae_checks
          test-threads: 2
        timeout-minutes: 15
        env:
          SN_AE_WAIT: 10

      - name: Run example app for file API against local network
        timeout-minutes: 10
        shell: bash
        run: cd sn && cargo run  --release  --features=test-utils --example client_files

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        if: failure()
        continue-on-error: true
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Print Network Log Stats
        shell: bash
        continue-on-error: true
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network

      - name: Upload Node Logs
        uses: actions/upload-artifact@v2
        with:
          name: sn_node_logs_e2e_split_self_hosted_ubuntu
          path: ~/.safe/node/local-test-network/**/*.log*
        if: failure()
        continue-on-error: true

      # if we don't clean up, the .safe folder might persist between runs
      - name: Cleanup self-hosted runner
        if: always()
        run: |
          rm -rf ~/.safe
          killall -9 sn_node

  api:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Run API tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: Mac install ripgrep
        if: matrix.os == 'macos-latest'
        run: brew install ripgrep

      - name: ubuntu install ripgrep
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get -y install ripgrep

      - name: windows install ripgrep
        if: matrix.os == 'windows-latest'
        run: choco install ripgrep

      - name: Build sn bins
        run: cd sn && cargo build --release --features=test-utils --bins
        timeout-minutes: 60

      - name: Build testnet
        run: cargo build  --release --bin testnet
        timeout-minutes: 60

      - name: Build log_cmds_inspector
        run: cargo build  --release --bin log_cmds_inspector
        timeout-minutes: 60

      - name: Build all sn_api tests
        run: cargo test --no-run -p sn_api --release --lib

      - name: Start the network
        run: ./target/release/testnet
        id: section-startup
        env:
          RUST_LOG: "safe_network,sn_api,sn_node=trace"

      - name: Print Network Log Stats at start
        shell: bash
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success' && matrix.os != 'windows-latest'

      - name: Wait for all nodes to join
        shell: bash
        run: ./resources/scripts/wait_for_nodes_to_join.sh
        timeout-minutes: 10

      - name: Print Network Log Stats after nodes joined
        shell: bash
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success' && matrix.os != 'windows-latest'

      - name: Run API tests
        uses: jacderida/cargo-nextest@main
        with:
          test-run-name: api-${{ matrix.os }}
          profile: ci
          junit-path: junit.xml
          package: sn_api
          release: true
          test-threads: 10
        timeout-minutes: 60
        env:
          SN_QUERY_TIMEOUT: 10

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        if: failure() && matrix.os
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Print Network Log Stats
        shell: bash
        continue-on-error: true
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success'

      - name: Upload Node Logs to AWS for Windowns
        run: aws s3 sync C:\Users\runneradmin\.safe\node\local-test-network\ s3://safe-network-ci-logs/${{github.sha}}/${{ github.run_id }}-${{ github.run_number }}/${{matrix.os}}
        if: failure() &&  matrix.os == 'windows-latest'
        continue-on-error: true

      - name: Upload Node Logs to AWS for Non-Windows
        run: aws s3 sync ~/.safe/node/local-test-network/ s3://safe-network-ci-logs/${{github.sha}}/${{ github.run_id }}-${{ github.run_number }}/${{matrix.os}}
        if: failure() &&  matrix.os != 'windows-latest'
        continue-on-error: true

      - name: Upload Node Logs
        uses: actions/upload-artifact@v2
        with:
          name: sn_node_logs_api_${{matrix.os}}
          path: ~/.safe/node/local-test-network/**/*.log*
        if: failure()
        continue-on-error: true

      # if we don't clean up, the .safe folder might persist between runs
      - name: Cleanup self-hosted runner
        if: matrix.os == 'ubuntu-latest' && always()
        run: |
          rm -rf ~/.safe
          killall -9 sn_node

  cli:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Run CLI tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: Mac install ripgrep
        if: matrix.os == 'macos-latest'
        run: brew install ripgrep

      - name: ubuntu install ripgrep
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get -y install ripgrep

      - name: windows install ripgrep
        if: matrix.os == 'windows-latest'
        run: choco install ripgrep

      - name: Build sn bins
        run: cd sn && cargo build --release --features=test-utils --bins
        timeout-minutes: 60

      - name: Build testnet
        run: cargo build  --release --bin testnet
        timeout-minutes: 60

      - name: Build log_cmds_inspector
        run: cargo build  --release --bin log_cmds_inspector
        timeout-minutes: 60

      - name: Start the network
        run: ./target/release/testnet
        id: section-startup
        env:
          RUST_LOG: "safe_network,sn_api,sn_node=trace"

      - name: Print Network Log Stats at start
        shell: bash
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success' && matrix.os != 'windows-latest'

      - name: Wait for all nodes to join
        shell: bash
        run: ./resources/scripts/wait_for_nodes_to_join.sh
        timeout-minutes: 10

      - name: Build all CLI tests
        run: cargo test --no-run -p sn_cli --release

      - name: Generate keys for test run
        run: cargo run --package sn_cli --release -- keys create --for-cli

      - name: Run CLI tests
        uses: jacderida/cargo-nextest@main
        with:
          test-run-name: cli-${{ matrix.os }}
          profile: ci
          junit-path: junit.xml
          package: sn_cli
          release: true
          test-threads: 10
        timeout-minutes: 60
        env:
          SN_QUERY_TIMEOUT: 10

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        if: failure() && matrix.os
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Print Network Log Stats
        shell: bash
        continue-on-error: true
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success'

      - name: Upload Node Logs to AWS for Windowns
        run: aws s3 sync C:\Users\runneradmin\.safe\node\local-test-network\ s3://safe-network-ci-logs/${{github.sha}}/${{ github.run_id }}-${{ github.run_number }}/${{matrix.os}}
        if: failure() &&  matrix.os == 'windows-latest'
        continue-on-error: true

      - name: Upload Node Logs to AWS for Non-Windows
        run: aws s3 sync ~/.safe/node/local-test-network/ s3://safe-network-ci-logs/${{github.sha}}/${{ github.run_id }}-${{ github.run_number }}/${{matrix.os}}
        if: failure() &&  matrix.os != 'windows-latest'
        continue-on-error: true

      - name: Upload Node Logs
        uses: actions/upload-artifact@v2
        with:
          name: sn_node_logs_api_${{matrix.os}}
          path: ~/.safe/node/local-test-network/**/*.log*
        if: failure()
        continue-on-error: true

      # if we don't clean up, the .safe folder might persist between runs
      - name: Cleanup self-hosted runner
        if: matrix.os == 'ubuntu-latest' && always()
        run: |
          rm -rf ~/.safe
          killall -9 sn_node

  # This is required for publishing test results that come from forks. The actual publishing of the
  # results occurs in another workflow that will be triggered when this one finishes. Uploading this
  # 'event file' is necessary for the triggering to occur.
  upload_event_file:
    if: always()
    name: Upload event file
    needs: [unit, e2e, e2e-split, api, cli]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Upload event file
        uses: actions/upload-artifact@v2
        with:
          name: event-file
          path: ${{ github.event_path }}
