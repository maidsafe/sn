name: Bors CI Tests

on:
  push:
    branches: [staging, trying]

env:
  # Turn on backtrace as needed. Generally (passing) CI should not need this.
  # RUST_BACKTRACE: 1
  # Deny all compiler warnings.
  RUSTFLAGS: "-D warnings"
  RUST_LOG: "safe_network,sn_api,sn_node=trace"
  SAFE_AUTH_PASSPHRASE: "x"
  SAFE_AUTH_PASSWORD: "y"
  NODE_COUNT: 15
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'eu-west-2'
  POST_TEST_SLEEP: 5

jobs:

  # bors Continuous Integration
  ci-success:
    # refereneced in bors.toml
    name: ci
    if: ${{ success() }}
    # github jobs that need to have passed for bors to give the all clear
    needs:
      - e2e
      - e2e-split
      - unit
      - checks
      - test-publish
      - lint
    runs-on: ubuntu-latest
    steps:
      - name: CI succeeded
        run: exit 0

  lint:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@f114310111fdbd07e99f47f9ca13d62b3ec98372

  checks:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Run rustfmt and clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: sn_changes
        with:
          filters: |
            src:
              - 'sn/src/**'
              - 'sn_api/src/**'
              - 'sn_cli/src/**'

      - uses: actions-rs/toolchain@v1
        if: steps.sn_changes.outputs.src == 'true'
        id: toolchain
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - name: Check formatting
        if: steps.sn_changes.outputs.src == 'true'
        run: cargo fmt --all -- --check

      - shell: bash
        if: steps.sn_changes.outputs.src == 'true'
        run: cargo clippy --all-targets --all-features

  test-publish:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Test Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: sn_changes
        with:
          filters: |
            src:
              - 'sn/src/**'

      - uses: actions-rs/toolchain@v1
        if: steps.sn_changes.outputs.src == 'true'
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Publish Dry Run
        if: steps.sn_changes.outputs.src == 'true'
        run: cd sn && cargo publish --dry-run

  build:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Build sn bins
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      # Install Rust
      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: Build sn bins
        run: cargo build -p safe_network --release --features=test-utils --bins
        timeout-minutes: 60

      - name: Build testnet
        run: cargo build  --release --bin testnet
        timeout-minutes: 60

      - name: Build log_cmds_inspector
        run: cargo build  --release --bin log_cmds_inspector
        timeout-minutes: 60

  unit:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            messaging:
              - 'sn/src/messaging/**'
              - 'sn/src/types/**'
            node:
              - 'sn/src/node/**'
              - 'sn/src/routing/**'
              - 'sn/src/messaging/**'
              - 'sn/src/types/**'
              - 'sn/src/dbs/**'
              - 'sn/src/prefix_map/**'
              - 'sn/src/url/**'
            client:
              - 'sn/src/client/**'
              - 'sn/src/messaging/**'
              - 'sn/src/types/**'
              - 'sn/src/dbs/**'
              - 'sn/src/prefix_map/**'
              - 'sn/src/url/**'
            routing:
              - 'sn/src/routing/**'
              - 'sn/src/messaging/**'
              - 'sn/src/types/**'
              - 'sn/src/prefix_map/**'
            types:
              - 'sn/src/types/**'
            dbs:
              - 'sn/src/dbs/**'
            prefix_map:
              - 'sn/src/prefix_map/**'

      # Install Rust
      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: Build all test targets
        # all = all crates in workspace, lib/bins targets, with these features...
        run: cd sn && cargo test --no-run --release --features=test-utils

      - name: Run Data Types tests
        if: steps.changes.outputs.types == 'true'
        run: cd sn && cargo test --release --features=test-utils -- types
        timeout-minutes: 10

      - name: Run DBs tests
        if: steps.changes.outputs.dbs == 'true'
        run: cd sn && cargo test --release --features=test-utils -- dbs
        timeout-minutes: 5

      - name: Run PrefixMap tests
        if: steps.changes.outputs.prefix_map == 'true'
        run: cd sn && cargo test --release --features=test-utils -- prefix_map
        timeout-minutes: 5

      - name: Run Messaging tests
        if: steps.changes.outputs.messaging == 'true'
        run: cd sn && cargo test --release --features=test-utils -- messaging
        timeout-minutes: 5

      - name: Run Node tests
        if: steps.changes.outputs.node == 'true'
        run: cd sn && cargo test --release --features=test-utils -- node
        timeout-minutes: 5

      - name: Run Routing tests
        if: steps.changes.outputs.routing == 'true'
        run: cd sn && cargo test --release --features=test-utils -- routing
        timeout-minutes: 10

  e2e:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: E2E tests
    runs-on: ${{ matrix.os }}
    needs: ["build"]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      # Install Rust
      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: Mac install ripgrep
        if: matrix.os == 'macos-latest'
        run: brew install ripgrep

      - name: ubuntu install ripgrep
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get -y install ripgrep

      - name: windows install ripgrep
        if: matrix.os == 'windows-latest'
        run: choco install ripgrep

      - name: Build all safe_network tests
        run: cd sn && cargo test --no-run --release --features=test-utils
        timeout-minutes: 60

      - name: Build testnet
        run: cargo build  --release --bin testnet
        timeout-minutes: 60

      - name: Build log_cmds_inspector
        run: cargo build  --release --bin log_cmds_inspector
        timeout-minutes: 60

      - name: Start the network
        run: ./target/release/testnet
        id: section-startup
        env:
          RUST_LOG: "safe_network,sn_api,sn_node=trace"

      - name: Wait for all nodes to join
        shell: bash
        # we are not running with 'always-joinable' set, so we should not have the full 33 nodes as yet.
        run: ./resources/scripts/wait_for_nodes_to_join.sh
        timeout-minutes: 10

      - name: Print Network Log Stats at start
        shell: bash
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success' && matrix.os != 'windows-latest'

      - name: ubuntu install zsh
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get -y install zsh

      - name: Run network asserts one by one
        shell: bash
        # here test-threads=1 is important so we dont pollute log counts by running tests in parallel
        run: cd sn && cargo test --release --features=test-utils -- --ignored network_assert --test-threads=1 --skip health && sleep $POST_TEST_SLEEP
        timeout-minutes: 5
        continue-on-error: true

      # a catchall to ensure any new client api tests are run (ideally any major new section should have its own test run)
      - name: Initial client tests... (unix)
        shell: zsh {0}
        if: matrix.os != 'windows-latest'
        # always joinable not actually needed here, but should speed up compilation as we've just built with it
        run: cd sn && repeat 5 cargo test --release --features=test-utils -- client --skip client_api::reg --skip client_api::file --test-threads=2 && sleep $POST_TEST_SLEEP
        timeout-minutes: 10 # avg run is 80s * 5 is _just_ under 7 mins. so set to 10 mins

      # a catchall to ensure any new client api tests are run (ideally any major new section should have its own test run)
      - name: Initial client tests... (win)
        if: matrix.os == 'windows-latest'
        shell: bash
        # always joinable not actually needed here, but should speed up compilation as we've just built with it
        run: cd sn && cargo test --release --features=test-utils -- client --skip client_api::reg --skip client_api::file --test-threads=2 && sleep $POST_TEST_SLEEP
        timeout-minutes: 5

      # register api
      - name: Client reg tests against local network (unix)
        shell: zsh {0}
        if: matrix.os != 'windows-latest'
        run: cd sn && repeat 5 cargo test --release --features=test-utils -- client_api::reg --test-threads=1 --skip ae  && sleep $POST_TEST_SLEEP
        timeout-minutes: 10

      # register api
      - name: Client reg tests against local network (win)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: cd sn && cargo test --release --features=test-utils -- client_api::reg --test-threads=1 --skip ae && sleep $POST_TEST_SLEEP
        timeout-minutes: 10


      # file api
      - name: client file tests against local network (unix)
        shell: zsh {0}
        if: matrix.os != 'windows-latest'
        run: cd sn && repeat 5 cargo test --release --features=test-utils -- client_api::file --test-threads=1 --skip ae --skip from_many_clients  && sleep $POST_TEST_SLEEP
        timeout-minutes: 25

      # file api
      - name: client file tests against local network (win)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: cd sn && cargo test --release --features=test-utils -- client_api::file --test-threads=1 --skip ae --skip from_many_clients  && sleep $POST_TEST_SLEEP
        timeout-minutes: 15

      # ae tests api
      - name: client ae tests against local network (unix)
        shell: zsh {0}
        if: matrix.os != 'windows-latest'
        run: cd sn && repeat 5 cargo test --release --features=test-utils -- ae_checks --test-threads=2 && sleep $POST_TEST_SLEEP
        timeout-minutes: 15
        env:
          SN_AE_WAIT: 10

      - name: client ae tests against local network (win)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: cd sn && cargo test --release --features=test-utils -- ae_checks --test-threads=2 && sleep $POST_TEST_SLEEP
        timeout-minutes: 10
        env:
          SN_AE_WAIT: 10

      - name: Run example app for File API against local network
        timeout-minutes: 10
        shell: bash
        run: cd sn && cargo run  --release  --features=test-utils --example client_files

      # # many client connections
      # - name: many client test against local network
      #   shell: bash
      #   run: cd sn && cargo test --release --features=test-utils -- from_many_clients  && sleep $POST_TEST_SLEEP
      #   timeout-minutes: 20
      #   env:
      #     SN_QUERY_TIMEOUT: 240 # 240 secs

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        if: failure() && matrix.os != 'windows-latest'
        continue-on-error: true
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Print Network Log Stats
        shell: bash
        continue-on-error: true
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success' &&  matrix.os != 'windows-latest'


      - name: Upload Node Logs
          # Upload artifacts.
        uses: actions/upload-artifact@v2
        with:
          name: ${{github.job.name}}_sn_node_logs_${{matrix.os}}
          path: ~/.safe/node/local-test-network/**/*.log*
        if: failure()
        continue-on-error: true

  e2e-split:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: E2E tests w/ full network
    runs-on: "${{ matrix.os }}"
    needs: ["e2e"]
    env:
      NODE_COUNT: 30
    strategy:
      matrix:
        os: [self-hosted-ubuntu]
    steps:
      - uses: actions/checkout@v2

      # Install Rust
      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: ubuntu install ripgrep
        run: sudo apt-get -y install ripgrep

      - name: Build all safe_network tests
        run: cd sn && cargo test --no-run --release --features=test-utils
        timeout-minutes: 60

      - name: Build all safe_network bins
        run: cd sn && cargo build --release --features=test-utils --bins
        timeout-minutes: 60

      - name: Build testnet
        run: cargo build  --release --bin testnet
        timeout-minutes: 60

      - name: Build log_cmds_inspector
        run: cargo build  --release --bin log_cmds_inspector
        timeout-minutes: 60

      - name: Start the network
        run: ./target/release/testnet
        id: section-startup
        env:
          RUST_LOG: "safe_network,sn_api,sn_node=trace"

      - name: Print Network Log Stats at start
        shell: bash
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome

      - name: Wait for all nodes to join
        shell: bash
        # we are not running with 'always-joinable' set, so we should not have the full 33 nodes as yet.
        run: NODE_COUNT=28 ./resources/scripts/wait_for_nodes_to_join.sh
        timeout-minutes: 10

      - name: Is the network split and ready?
        shell: bash
        run: ./resources/scripts/network_is_ready.sh
        timeout-minutes: 5

      - name: Print Network Log Stats after nodes joined
        shell: bash
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network

      - name: ubuntu install zsh
        run: |
          sudo apt-get -y install zsh

      - name: Run network asserts one by one
        shell: bash
        # here test-threads=1 is important so we dont pollute log counts by running tests in parallel
        run: cd sn && cargo test --release --features=test-utils -- --ignored network_assert --test-threads=1 --skip health && sleep $POST_TEST_SLEEP
        timeout-minutes: 5
        continue-on-error: true

      # many_clients test
      - name: many client tests
        run: cd sn && cargo test --release --features=test-utils -- from_many_clients  && sleep $POST_TEST_SLEEP
        timeout-minutes: 15

      # a catchall to ensure any new client api tests are run (ideally any major new section should have its own test run)
      - name: Initial client tests... (unix)
        shell: zsh {0}
        # always joinable not actually needed here, but should speed up compilation as we've just built with it
        run: cd sn && repeat 5 cargo test --release --features=test-utils -- client --skip client_api::reg --skip client_api::file --test-threads=2 && sleep $POST_TEST_SLEEP
        timeout-minutes: 7


      # register api
      - name: Client reg tests against local network (unix)
        shell: zsh {0}
        run: cd sn && repeat 5 cargo test --release --features=test-utils -- client_api::reg --test-threads=1 --skip ae && sleep $POST_TEST_SLEEP
        timeout-minutes: 10


      # file api
      - name: client file tests against local network (unix)
        shell: zsh {0}
        run: cd sn && repeat 5 cargo test --release --features=test-utils -- client_api::file --test-threads=1 --skip ae --skip from_many_clients  && sleep $POST_TEST_SLEEP
        timeout-minutes: 25


      # ae tests api
      - name: client ae tests against local network (unix)
        shell: zsh {0}
        run: cd sn && repeat 5 cargo test --release --features=test-utils -- ae_checks --test-threads=2 && sleep $POST_TEST_SLEEP
        timeout-minutes: 15
        env:
          SN_AE_WAIT: 10

      - name: Run example app for file API against local network
        timeout-minutes: 10
        shell: bash
        run: cd sn && cargo run  --release  --features=test-utils --example client_files

      # many client connections
      - name: many client test against local network
        shell: bash
        run: cd sn && cargo test --release --features=test-utils -- from_many_clients  && sleep $POST_TEST_SLEEP
        timeout-minutes: 20

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        if: failure()
        continue-on-error: true
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Print Network Log Stats
        shell: bash
        continue-on-error: true
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network

      - name: Upload Node Logs
          # Upload artifacts.
        uses: actions/upload-artifact@v2
        with:
          name: ${{github.job.name}}_sn_node_logs_${{matrix.os}}
          path: ~/.safe/node/local-test-network/**/*.log*
        if: failure()
        continue-on-error: true

      # if we don't clean up, the .safe folder might persist between runs
      - name: Cleanup self-hosted runner
        if: matrix.os == 'self-hosted-ubuntu' && always()
        run: |
          rm -rf ~/.safe
          killall -9 sn_node

