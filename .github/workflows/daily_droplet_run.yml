name: Nightly Release Run

on:
  #schedule:
  ## * is a special character in YAML so you have to quote this string
  #- cron: "30 4 * * *"
  workflow_dispatch:
    inputs:
      node-count:
        description: number of nodes for the testnet
        required: true
        default: 30
      testnet-tool-repo-branch:
        description: >
          The branch for the testnet tool repository. This is to enable using forks to test changes to
          the testnet tool. Will default to the `main` branch.
        default: main
      testnet-tool-repo-user:
        description: >
          The user or organisation for the testnet tool repository. This is to enable using forks to
          test changes to the testnet tool. Will default to the `maidsafe` organisation.
        default: maidsafe

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.S3_DEPLOY_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_DEPLOY_AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: "eu-west-2"
  INSTALL_SCRIPT_URL: https://raw.githubusercontent.com/maidsafe/safe_network/main/resources/scripts/install.sh
  NODE_COUNT: 30
  POWERSHELL_INSTALL_SCRIPT_URL: https://raw.githubusercontent.com/maidsafe/safe_network/main/resources/scripts/install.ps1
  TESTNET_NIGHTLY_LOGS_BUCKET: s3://sn-node/nightly_testnet_logs
  TESTNET_NIGHTLY_LOGS_BUCKET_URL: https://sn-node.s3.eu-west-2.amazonaws.com/nightly_testnet_logs
  TESTNET_TOOL_BUCKET_URL: https://sn-node.s3.eu-west-2.amazonaws.com/testnet_tool
  TESTNET_TOOL_REPO_BRANCH: main
  TESTNET_TOOL_REPO_USER: maidsafe
  WORKFLOW_URL: https://github.com/maidsafe/safe_network/actions/runs

jobs:
  cli-install-tests:
    name: cli install tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - shell: bash
        name: test install as root user
        run: |
          curl -so- $INSTALL_SCRIPT_URL | sudo bash
          if [[ ! -f /usr/local/bin/safe ]]; then
            echo "Failed to unpack safe to /usr/local/bin"
            exit 1
          fi
          expected_version=$(grep "^version" < sn_cli/Cargo.toml \
             | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          actual_version=$(safe --version | awk '{ print $2 }')
          echo "Expected version: $expected_version"
          echo "Actual version: $actual_version"
          if [[ $actual_version != $expected_version ]]; then exit 1; fi
      - shell: bash
        name: test install as non-root user
        run: |
          curl -so- $INSTALL_SCRIPT_URL | bash
          if [[ ! -f "$HOME/.safe/cli/safe" ]]; then
            echo "Failed to unpack safe to $HOME/.safe/cli/safe"
            exit 1
          fi
          expected_version=$(grep "^version" < sn_cli/Cargo.toml \
             | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          actual_version=$($HOME/.safe/cli/safe --version | awk '{ print $2 }')
          echo "Expected version: $expected_version"
          echo "Actual version: $actual_version"
          if [[ $actual_version != $expected_version ]]; then exit 1; fi
          # Since the installer attempts to update more than just the bashrc,
          # this isn't a comprehensive test, but I think it should do as a
          # starting point. Or until the other conditions could be reproduced.
          if ! $(cat "$HOME/.bashrc" | grep "^export PATH=\$PATH:$HOME/.safe/cli"); then
            echo "Installer has not updated the bashrc correctly"
            exit 1
          fi
  windows-cli-install-test:
    name: windows cli install test
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - shell: powershell
        name: run install
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; `
            iex ((New-Object System.Net.WebClient).DownloadString($env:POWERSHELL_INSTALL_SCRIPT_URL))
      - shell: powershell
        name: test install
        run: |
          # Use a new session to test the result of the install.
          # This is because of things like the PATH modification, which requires a new session.
          $installPath = Join-Path -Path $env:USERPROFILE -ChildPath ".safe\cli"
          $safeBinPath = Join-Path -Path $installPath -ChildPath "safe.exe"
          $failed = $false

          $list = Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* `
            | Where-Object { $_.DisplayName -like "Microsoft Visual C++*" } | Select-Object DisplayName
          if ($list) {
            echo "Visual C++ Redistributable was installed"
          } else {
            echo "Visual C++ Redistributable was not installed"
            $failed = $true
          }

          $local:currentPaths = [Environment]::GetEnvironmentVariable(
            'Path', [EnvironmentVariableTarget]::User) -split ';'
          if ($currentPaths -contains $installPath) {
            echo "CLI install path was added to user PATH variable"
          } else {
            echo "CLI install path was not added to user PATH variable"
            $failed = $true
          }

          if (Test-Path $safeBinPath) {
            echo "Detected safe binary at $safeBinPath"
          } else {
            echo "Expected safe binary at $safeBinPath"
            $failed = $true
          }

          if ($failed) {
            echo "Test run failed. Please see output to determine failure."
            exit 1
          }

  build-node:
    name: build node and launch testnet
    runs-on: self-hosted
    env:
      CARGO_BUILD_TARGET: x86_64-unknown-linux-musl
      CARGO_HOME: /mnt/data/cargo
      TMPDIR: /mnt/data/tmp
    steps:
      - uses: actions/checkout@v2
      - shell: bash
        name: build node
        run: |
          cargo build --release --bin sn_node
          cp ./target/x86_64-unknown-linux-musl/release/sn_node /tmp/sn_node
      - name: Set TESTNET_ID env
        shell: bash
        run: |
          short_commit_hash=$(echo "${{ github.event.pull_request.head.sha || github.sha }}" | cut -c 1-7)
          echo "TESTNET_ID=gha-testnet-$short_commit_hash" >> $GITHUB_ENV
      - name: launch testnet
        uses: maidsafe/sn_testnet_action@main
        with:
          do-token: ${{ secrets.DO_TOKEN }}
          aws-access-key-id: ${{ secrets.S3_DEPLOY_AWS_ACCESS_KEY_ID }}
          aws-access-key-secret: ${{ secrets.S3_DEPLOY_AWS_SECRET_ACCESS_KEY }}
          ssh-secret-key: ${{ secrets.SSH_SECRET_KEY  }}
          node-count: ${{ inputs.node-count || env.NODE_COUNT }}
          node-path: /tmp/sn_node
          testnet-id: ${{ env.TESTNET_ID }}
          testnet-tool-repo-branch: ${{ inputs.testnet-tool-repo-branch || env.TESTNET_TOOL_REPO_BRANCH }}
          testnet-tool-repo-user: ${{ inputs.testnet-tool-repo-user || env.TESTNET_TOOL_REPO_USER }}
      # The other jobs in the workflow have the testnet launch as a dependency, but they go ahead
      # even if this job fails. It would be better if the whole workflow is abandoned if we don't
      # have a testnet to run the tests against.
      - name: cancel workflow if testnet launch fails
        uses: vishnudxb/cancel-workflow@v1.2
        if: failure()
        with:
          repo: octocat/hello-world
          workflow_id: ${{ github.run_id }}
          access_token: ${{ github.token }}

  client:
    name: client tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    needs: build-node
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set TESTNET_ID env
        shell: bash
        run: echo "TESTNET_ID=gha-testnet-$(echo ${{ github.event.pull_request.head.sha || github.sha }} | cut -c 1-7)" >> $GITHUB_ENV

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - name: Download network config
        shell: bash
        run: |
          mkdir -p ~/.safe/network_contacts
          curl $TESTNET_TOOL_BUCKET_URL/${{ env.TESTNET_ID }}/network-contacts > \
            ~/.safe/network_contacts/default

      - name: Build all client tests before running
        run: cargo test --no-run --release --package sn_client
        timeout-minutes: 25

      - name: Run client tests
        uses: jacderida/cargo-nextest@main
        with:
          test-run-name: nightly-e2e-client-${{ matrix.os }}
          profile: ci
          junit-path: junit.xml
          package: sn_client
          release: true
          filters: client
          features: check-replicas
          test-threads: 2
        timeout-minutes: 25

      - name: Run example app for file API
        shell: bash
        run: cargo run --release --example client_files

  api:
    name: api tests
    runs-on: ${{ matrix.os }}
    needs: [client, build-node]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Set TESTNET_ID env
        shell: bash
        run: echo "TESTNET_ID=gha-testnet-$(echo ${{ github.event.pull_request.head.sha || github.sha }} | cut -c 1-7)" >> $GITHUB_ENV

      - name: Download network config
        shell: bash
        run: |
          mkdir -p ~/.safe/network_contacts
          curl $TESTNET_TOOL_BUCKET_URL/${{ env.TESTNET_ID }}/network-contacts > \
            ~/.safe/network_contacts/default

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: Build all sn_api tests
        run: cargo test --no-run --release --lib --package sn_api
        timeout-minutes: 25

      - name: Download genesis DBC
        shell: bash
        run: |
          curl $TESTNET_TOOL_BUCKET_URL/${{ env.TESTNET_ID }}/genesis-dbc > /tmp/genesis_dbc

      - name: Run API tests
        uses: jacderida/cargo-nextest@main
        with:
          test-run-name: nightly-api-${{ matrix.os }}
          profile: ci
          junit-path: junit.xml
          package: sn_api
          release: true
          test-threads: 1
          features: check-replicas
        timeout-minutes: 60
        env:
          TEST_ENV_GENESIS_DBC_PATH: /tmp/genesis_dbc

  cli:
    name: cli tests
    runs-on: ${{ matrix.os }}
    needs: [api, build-node]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}
      - name: Set TESTNET_ID env
        shell: bash
        run: echo "TESTNET_ID=gha-testnet-$(echo ${{ github.event.pull_request.head.sha || github.sha }} | cut -c 1-7)" >> $GITHUB_ENV
      - name: Download network config
        shell: bash
        run: |
          mkdir -p ~/.safe/network_contacts
          curl $TESTNET_TOOL_BUCKET_URL/${{ env.TESTNET_ID }}/network-contacts > \
            ~/.safe/network_contacts/default
      - name: Download genesis DBC
        shell: bash
        run: |
          curl $TESTNET_TOOL_BUCKET_URL/${{ env.TESTNET_ID }}/genesis-dbc > /tmp/genesis_dbc

      - name: Build all CLI tests
        run: cd sn_cli && cargo test --no-run --release
        timeout-minutes: 25

      - name: Generate keys for test run
        run: cargo run --package sn_cli --release -- keys create --for-cli
      - name: Run CLI tests
        uses: jacderida/cargo-nextest@main
        with:
          test-run-name: nightly-cli-${{ matrix.os }}
          profile: ci
          junit-path: junit.xml
          package: sn_cli
          release: true
          test-threads: 1
          features: check-replicas
        timeout-minutes: 60
        env:
          TEST_ENV_GENESIS_DBC_PATH: /tmp/genesis_dbc

  kill-testnet:
    name: kill testnet
    runs-on: ubuntu-latest
    needs: [build-node, client, api, cli]
    steps:
      - name: Set TESTNET_ID env
        shell: bash
        run: |
          short_commit_hash=$(echo "${{ github.event.pull_request.head.sha || github.sha }}" | cut -c 1-7)
          echo "TESTNET_ID=gha-testnet-$short_commit_hash" >> $GITHUB_ENV
      - name: kill testnet
        uses: maidsafe/sn_testnet_action@main
        with:
          do-token: ${{ secrets.DO_TOKEN }}
          aws-access-key-id: ${{ secrets.S3_DEPLOY_AWS_ACCESS_KEY_ID }}
          aws-access-key-secret: ${{ secrets.S3_DEPLOY_AWS_SECRET_ACCESS_KEY }}
          action: "destroy"
          testnet-id: ${{ env.TESTNET_ID }}

  bump_version:
    if: github.repository_owner == 'maidsafe' && github.ref_name == 'main'
    runs-on: ubuntu-22.04
    needs: kill-testnet
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
          token: ${{ secrets.VERSION_BUMP_COMMIT_PAT }}
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: stable
          override: true
      - shell: bash
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      - shell: bash
        run: cargo install cargo-smart-release
      - shell: bash
        run: ./resources/scripts/bump_version.sh
      - name: push version bump commit and tags
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.VERSION_BUMP_COMMIT_PAT }}
          branch: main
          tags: true
      - name: Upload event file
        uses: actions/upload-artifact@main
        with:
          name: event-file
          path: ${{ github.event_path }}

  kill-if-fail:
    name: kill testnet on fail
    runs-on: ubuntu-latest
    if: |
      always() &&
      (needs.launch-testnet.result=='failure' ||
       needs.client.result=='failure' ||
       needs.api.result=='failure' ||
       needs.cli.result=='failure')
    needs: [build-node, client, api, cli]
    env:
      SSH_SECRET_KEY: ${{ secrets.SSH_SECRET_KEY  }}
    steps:
      - name: Set TESTNET_ID env
        shell: bash
        run: |
          short_commit_hash=$(echo "${{ github.event.pull_request.head.sha || github.sha }}" | cut -c 1-7)
          echo "TESTNET_ID=gha-testnet-$short_commit_hash" >> $GITHUB_ENV
      - name: package and upload logs
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_SECRET_KEY" > ~/.ssh/id_rsa
          chmod 0600 ~/.ssh/id_rsa
          cd /tmp
          aws s3 cp \
            "$TESTNET_NIGHTLY_LOGS_BUCKET/$TESTNET_ID-ip-list" \
            "$TESTNET_ID-ip-list"
          aws s3 cp \
            "$TESTNET_NIGHTLY_LOGS_BUCKET/$TESTNET_ID-genesis-dbc" \
            "$TESTNET_ID-genesis-dbc"
          aws s3 cp \
            "$TESTNET_NIGHTLY_LOGS_BUCKET/$TESTNET_ID-genesis-key" \
            "$TESTNET_ID-genesis-key"
          aws s3 cp \
            "$TESTNET_NIGHTLY_LOGS_BUCKET/$TESTNET_ID-network-contacts" \
            "$TESTNET_ID-network-contacts"

          wget https://raw.githubusercontent.com/maidsafe/sn_testnet_tool/main/scripts/logs-sync.sh
          chmod +x logs-sync.sh
          ./logs-sync.sh "$TESTNET_ID"
          mv $TESTNET_ID-genesis-dbc logs
          mv $TESTNET_ID-genesis-key logs
          mv $TESTNET_ID-network-contacts logs
          tar -C logs -zcvf $TESTNET_ID-run.tar.gz .
          aws s3 cp \
            "$TESTNET_ID-run.tar.gz" \
            "s3://safe-testnet-tool/$TESTNET_ID-run.tar.gz" \
            --acl public-read
          echo "The logs should be available at $TESTNET_NIGHTLY_LOGS_BUCKET_URL/$TESTNET_ID-run.tar.gz"

      - name: post notification to slack
        if: always()
        uses: bryannice/gitactions-slack-notification@2.0.0
        env:
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_GH_ACTIONS_WEBHOOK_URL }}
          SLACK_MESSAGE: "Please check the logs for the run at ${{ env.WORKFLOW_URL }}/${{ github.run_id }}"
          SLACK_TITLE: "Nightly Run Failed"

      - name: Kill testnet
        if: always()
        uses: maidsafe/sn_testnet_action@main
        with:
          do-token: ${{ secrets.DO_TOKEN }}
          aws-access-key-id: ${{ secrets.S3_DEPLOY_AWS_ACCESS_KEY_ID }}
          aws-access-key-secret: ${{ secrets.S3_DEPLOY_AWS_SECRET_ACCESS_KEY }}
          action: "destroy"
          testnet-id: ${{ env.TESTNET_ID }}
      - name: Upload event file
        uses: actions/upload-artifact@main
        with:
          name: event-file
          path: ${{ github.event_path }}
