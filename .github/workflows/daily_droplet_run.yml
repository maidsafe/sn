name: Nightly Release Run

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '30 4 * * *'
  workflow_dispatch:
    inputs:
      node-count:
        description: number of nodes for the testnet
        required: true
        default: 15

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'eu-west-2'
  INSTALL_SCRIPT_URL: https://raw.githubusercontent.com/maidsafe/safe_network/main/resources/scripts/install.sh
  POWERSHELL_INSTALL_SCRIPT_URL: https://raw.githubusercontent.com/maidsafe/safe_network/main/resources/scripts/install.ps1

jobs:
  cli-install-tests:
    name: cli install tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - shell: bash
        name: test install as root user
        run: |
          curl -so- $INSTALL_SCRIPT_URL | sudo bash
          if [[ ! -f /usr/local/bin/safe ]]; then
            echo "Failed to unpack safe to /usr/local/bin"
            exit 1
          fi
          expected_version=$(grep "^version" < sn_cli/Cargo.toml \
             | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          actual_version=$(safe --version | awk '{ print $2 }')
          echo "Expected version: $expected_version"
          echo "Actual version: $actual_version"
          if [[ $actual_version != $expected_version ]]; then exit 1; fi
      - shell: bash
        name: test install as non-root user
        run: |
          curl -so- $INSTALL_SCRIPT_URL | bash
          if [[ ! -f "$HOME/.safe/cli/safe" ]]; then
            echo "Failed to unpack safe to $HOME/.safe/cli/safe"
            exit 1
          fi
          expected_version=$(grep "^version" < sn_cli/Cargo.toml \
             | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          actual_version=$($HOME/.safe/cli/safe --version | awk '{ print $2 }')
          echo "Expected version: $expected_version"
          echo "Actual version: $actual_version"
          if [[ $actual_version != $expected_version ]]; then exit 1; fi
          # Since the installer attempts to update more than just the bashrc,
          # this isn't a comprehensive test, but I think it should do as a
          # starting point. Or until the other conditions could be reproduced.
          if ! $(cat "$HOME/.bashrc" | grep "^export PATH=\$PATH:$HOME/.safe/cli"); then
            echo "Installer has not updated the bashrc correctly"
            exit 1
          fi
  windows-cli-install-test:
    name: windows cli install test
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - shell: powershell
        name: run install
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; `
            iex ((New-Object System.Net.WebClient).DownloadString($env:POWERSHELL_INSTALL_SCRIPT_URL))
      - shell: powershell
        name: test install
        run: |
          # Use a new session to test the result of the install.
          # This is because of things like the PATH modification, which requires a new session.
          $installPath = Join-Path -Path $env:USERPROFILE -ChildPath ".safe\cli"
          $safeBinPath = Join-Path -Path $installPath -ChildPath "safe.exe"
          $failed = $false

          $list = Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* `
            | Where-Object { $_.DisplayName -like "Microsoft Visual C++*" } | Select-Object DisplayName
          if ($list) {
            echo "Visual C++ Redistributable was installed"
          } else {
            echo "Visual C++ Redistributable was not installed"
            $failed = $true
          }

          $local:currentPaths = [Environment]::GetEnvironmentVariable(
            'Path', [EnvironmentVariableTarget]::User) -split ';'
          if ($currentPaths -contains $installPath) {
            echo "CLI install path was added to user PATH variable"
          } else {
            echo "CLI install path was not added to user PATH variable"
            $failed = $true
          }

          if (Test-Path $safeBinPath) {
            echo "Detected safe binary at $safeBinPath"
          } else {
            echo "Expected safe binary at $safeBinPath"
            $failed = $true
          }

          if ($failed) {
            echo "Test run failed. Please see output to determine failure."
            exit 1
          }

  build-node:
    name: build node
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: stable
          override: true
      - shell: bash
        name: build node
        run: |
          sudo apt update -y
          sudo apt install -y musl-tools
          rustup target add x86_64-unknown-linux-musl
          cargo build --release --target x86_64-unknown-linux-musl --bin sn_node
      - uses: actions/upload-artifact@main
        with:
          name: sn_node-x86_64-unknown-linux-musl
          path: |
            target/x86_64-unknown-linux-musl/release

  launch-testnet:
    name: launch testnet
    needs: build-node
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@master
        with:
          name: sn_node-x86_64-unknown-linux-musl
          path: sn_node
      - shell: bash
        name: copy node to temp location
        run: cp sn_node/sn_node /tmp
      - name: launch testnet
        uses: maidsafe/sn_testnet_action@main
        with:
          do-token: ${{ secrets.DO_TOKEN }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-access-key-secret: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ssh-secret-key: ${{ secrets.SSH_SECRET_KEY  }}
          node-count: ${{ github.event.inputs.node-count || 30 }}
          node-path: /tmp/sn_node
      # The other jobs in the workflow have the testnet launch as a dependency, but they go ahead
      # even if this job fails. It would be better if the whole workflow is abandoned if we don't
      # have a testnet to run the tests against.
      - name: cancel workflow if testnet launch fails
        uses: vishnudxb/cancel-workflow@v1.2
        if: failure()
        with:
          repo: octocat/hello-world
          workflow_id: ${{ github.run_id }}
          access_token: ${{ github.token }}

  client:
    name: client tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    needs: launch-testnet
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set TESTNET_ID env
        shell: bash
        run: echo "TESTNET_ID=gha-testnet-$(echo ${{ github.event.pull_request.head.sha || github.sha }} | cut -c 1-7)" >> $GITHUB_ENV

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - name: Download network config
        shell: bash
        run: |
          mkdir -p ~/.safe/prefix_maps
          curl https://safe-testnet-tool.s3.eu-west-2.amazonaws.com/${{ env.TESTNET_ID }}-prefix-map > ~/.safe/prefix_maps/default

      - name: Build all test targets
        run: cargo test --no-run --release

      - name: Run client tests
        uses: jacderida/cargo-nextest@main
        with:
          test-run-name: nightly-e2e-client-${{ matrix.os }}
          profile: ci
          junit-path: junit.xml
          package: sn_client
          release: true
          filters: client
          test-threads: 2
        timeout-minutes: 25

      - name: Run example app for file API
        shell: bash
        run: cargo run --release --example client_files

  api:
    name: api tests
    if: ${{ always() }} # give the suite a chance to run, even if the client tests fail.
    runs-on: ${{ matrix.os }}
    needs: launch-testnet
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Set TESTNET_ID env
        shell: bash
        run: echo "TESTNET_ID=gha-testnet-$(echo ${{ github.event.pull_request.head.sha || github.sha }} | cut -c 1-7)" >> $GITHUB_ENV
      - name: Download network prefix map
        shell: bash
        run: |
          mkdir -p ~/.safe/prefix_maps
          curl https://safe-testnet-tool.s3.eu-west-2.amazonaws.com/${{ env.TESTNET_ID }}-prefix-map > ~/.safe/prefix_maps/default

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: Build all sn_api tests
        run: cargo test --no-run -p sn_api --release --lib

      - name: Run API tests
        uses: jacderida/cargo-nextest@main
        with:
          test-run-name: nightly-api-${{ matrix.os }}
          profile: ci
          junit-path: junit.xml
          package: sn_api
          release: true
          test-threads: 10
        timeout-minutes: 60
        env:
          SN_QUERY_TIMEOUT: 10

  cli:
    name: cli tests
    if: ${{ always() }} # give the suite a chance to run, even if the api tests fail.
    runs-on: ${{ matrix.os }}
    needs: launch-testnet
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}
      - name: Set TESTNET_ID env
        shell: bash
        run: echo "TESTNET_ID=gha-testnet-$(echo ${{ github.event.pull_request.head.sha || github.sha }} | cut -c 1-7)" >> $GITHUB_ENV
      - name: Download network config
        shell: bash
        run: |
          mkdir -p ~/.safe/prefix_maps
          curl https://safe-testnet-tool.s3.eu-west-2.amazonaws.com/${{ env.TESTNET_ID }}-prefix-map > ~/.safe/prefix_maps/default

      - name: Build all CLI tests
        run: cargo test --no-run -p sn_cli --release

      - name: Generate keys for test run
        run: cargo run --package sn_cli --release -- keys create --for-cli
      - name: Run CLI tests
        uses: jacderida/cargo-nextest@main
        with:
          test-run-name: nightly-cli-${{ matrix.os }}
          profile: ci
          junit-path: junit.xml
          package: sn_cli
          release: true
          test-threads: 10
        timeout-minutes: 60
        env:
          SN_QUERY_TIMEOUT: 10

  kill-testnet:
    name: kill testnet
    runs-on: ubuntu-latest
    needs: [launch-testnet, client, api, cli]
    steps:
      - name: kill testnet
        uses: maidsafe/sn_testnet_action@main
        with:
          do-token: ${{ secrets.DO_TOKEN }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-access-key-secret: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          action: 'destroy'

  bump_version:
    runs-on: ubuntu-20.04
    needs: kill-testnet
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          token: ${{ secrets.VERSION_BUMP_COMMIT_PAT }}
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: stable
          override: true
      - shell: bash
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      - shell: bash
        run: cargo install cargo-smart-release
      - shell: bash
        run: ./resources/scripts/bump_version.sh
      - name: push version bump commit and tags
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.VERSION_BUMP_COMMIT_PAT }}
          branch: main
          tags: true
      - name: Upload event file
        uses: actions/upload-artifact@main
        with:
          name: event-file
          path: ${{ github.event_path }}

  kill-if-fail:
    name: kill testnet on fail
    runs-on: ubuntu-latest
    if: |
      always() &&
      (needs.launch-testnet.result=='failure' ||
       needs.client.result=='failure' ||
       needs.api.result=='failure' ||
       needs.cli.result=='failure')
    needs: [launch-testnet, client, api, cli]
    steps:
      - name: Kill testnet
        uses: maidsafe/sn_testnet_action@main
        with:
          do-token: ${{ secrets.DO_TOKEN }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-access-key-secret: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          action: 'destroy'
      - name: Upload event file
        uses: actions/upload-artifact@main
        with:
          name: event-file
          path: ${{ github.event_path }}
