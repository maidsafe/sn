# Workflow to run the basic PR checks.
# Currently this will run ubuntu oinly, as that is a good and fast canary.
# Other platforms will be checked as part of the merge process via BORS
name: PR Checks

on:
  pull_request:
    branches: ["*"]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_INCREMENTAL: 0 # bookkeeping for incremental builds has overhead, not useful in CI.
  SAFE_AUTH_PASSPHRASE: "x"
  SAFE_AUTH_PASSWORD: "y"
  NODE_COUNT: 15
  BUILD_ARTIFACTS_BUCKET: s3://maidsafe-build-artifacts/safe_network
  BUILD_ARTIFACTS_URL: https://maidsafe-build-artifacts.s3.eu-west-2.amazonaws.com/safe_network

jobs:
  # TODO: Reenable when blst has been updated and this isn't just red the whole time.

  # cargo-deny:
  #   if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2

  #   - shell: bash
  #     run: wget https://raw.githubusercontent.com/maidsafe/QA/master/misc-scripts/deny.toml

  #   - uses: EmbarkStudios/cargo-deny-action@v1
  cargo-udeps:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Unused dependency check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          #Needs nightly to distinguish between deps of different versions
          toolchain: nightly
          override: true

      - name: Run cargo-udeps
        uses: aig787/cargo-udeps-action@v1
        with:
          version: "latest"
          args: "--all-targets"

  checks:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Various checks
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v5
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - name: Check formatting
        run: cargo fmt --all -- --check

      - shell: bash
        run: cargo clippy --all-targets --all-features -- -Dwarnings

      - name: Check documentation
        # Deny certain `rustdoc` lints that are unwanted.
        # See https://doc.rust-lang.org/rustdoc/lints.html for lints that are 'warning' by default.
        run: RUSTDOCFLAGS="--deny=warnings" cargo doc --no-deps

  unit:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}-unit

      - name: Build sn_interface tests before running
        run: cd sn_interface && cargo test --no-run --release
        timeout-minutes: 50

      - name: Run sn_interface tests
        timeout-minutes: 25
        run: cd sn_interface && cargo test --release

      - name: Build sn_fault_detection tests before running
        run: cd sn_fault_detection && cargo test --no-run --release
        timeout-minutes: 50

      - name: Run sn_fault_detection tests
        timeout-minutes: 15
        run: cd sn_fault_detection && cargo test --release

      - name: Build sn_node tests before running
        run: cd sn_node && cargo test --no-run --release
        timeout-minutes: 50

      - name: Run sn_node tests
        timeout-minutes: 20
        run: cd sn_node && cargo test --release

      - name: Build sn_cli tests before running
        run: cd sn_cli && cargo test --no-run --release
        timeout-minutes: 50

      - name: Run sn_cli tests
        timeout-minutes: 25
        run: cd sn_cli && cargo test --release --bin safe

  build:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: Build node and testnet binaries (EC2)
    runs-on: self-hosted
    env:
      CARGO_BUILD_TARGET: x86_64-unknown-linux-musl
      CARGO_HOME: /mnt/data/cargo
      TMPDIR: /mnt/data/tmp
    steps:
      - uses: actions/checkout@v2
      - name: build sn_node and testnet
        run: |
          cargo build --release --bin sn_node
          cargo build --release --bin testnet
      - name: upload artifacts to s3
        run: |
          mkdir artifacts
          cp target/x86_64-unknown-linux-musl/release/sn_node artifacts
          cp target/x86_64-unknown-linux-musl/release/testnet artifacts
          tar -zcvf artifacts-$GITHUB_RUN_ID.tar.gz -C artifacts/ .
          aws s3 cp --acl public-read \
            artifacts-$GITHUB_RUN_ID.tar.gz $BUILD_ARTIFACTS_BUCKET/artifacts-$GITHUB_RUN_ID.tar.gz

  e2e:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: E2E tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: install ripgrep
        run: sudo apt-get install ripgrep

      - name: download and unpack artifacts
        run: |
          curl -O $BUILD_ARTIFACTS_URL/artifacts-$GITHUB_RUN_ID.tar.gz
          mkdir -p artifacts ~/.safe/node
          tar -xvf artifacts-$GITHUB_RUN_ID.tar.gz -C artifacts/ .
          chmod +x artifacts/sn_node
          chmod +x artifacts/testnet
          cp artifacts/sn_node ~/.safe/node

      - name: Start the network
        run: ./artifacts/testnet --interval 30000
        env:
          RUST_LOG: "sn_node,sn_consensus,sn_fault_detection=trace,sn_interface=trace"

      - name: Wait for all nodes to join
        shell: bash
        run: ./resources/scripts/wait_for_nodes_to_join.sh
        timeout-minutes: 5

      - name: Build all tests before running non ubuntu
        run: cargo test --no-run --release --features check-replicas --package sn_client
        timeout-minutes: 50

      - name: Run client test of limit-client-upload-size feature
        env:
          RUST_LOG: "sn_client,sn_interface"
        run: cargo test --release --features limit-client-upload-size --package sn_client -- limits_upload_size
        timeout-minutes: 5

      - name: Run client tests
        env:
          RUST_LOG: "sn_client,sn_interface"
        run: cargo test --release --features check-replicas --package sn_client
        timeout-minutes: 50

      - name: Run example app for file API against local network
        timeout-minutes: 10
        shell: bash
        run: cargo run --release --example client_files --package sn_client

      - name: Ensure no nodes have left during test runs
        timeout-minutes: 1
        shell: bash
        # we just want to print out the info. If there is none, an exit code of 1 is returned, so here we return true
        run: rg "Membership - decided" $HOME/.safe/node/local-test-network | rg Left || true

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        continue-on-error: true
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Kill all nodes
        shell: bash
        timeout-minutes: 1
        if: failure()
        continue-on-error: true
        run: |
          pkill sn_node
          echo "$(pgrep sn_node | wc -l) nodes still running"

      - name: Generate StateMap
        shell: bash
        continue-on-error: true
        run: |
          cargo install --git https://github.com/TritonDataCenter/statemap.git
          ./resources/scripts/statemap-preprocess.sh --run-statemap > safe_statemap.svg

      - name: Upload StateMap
        uses: actions/upload-artifact@main
        with:
          name: statemap_e2e_${{matrix.os}}.svg
          path: safe_statemap.svg
        continue-on-error: true

      - name: Tar log files
        shell: bash
        continue-on-error: true
        run: find ~/.safe/node/local-test-network -iname '*.log*' | tar -zcvf log_files.tar.gz --files-from -
        if: failure()

      - name: Upload Node Logs
        uses: actions/upload-artifact@main
        with:
          name: sn_node_logs_e2e_${{matrix.os}}
          path: log_files.tar.gz
        if: failure()
        continue-on-error: true

  e2e-msg-happy-path:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: E2E tests (msg happy path)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: install ripgrep
        run: sudo apt-get install ripgrep

      - name: download and unpack artifacts
        run: |
          curl -O $BUILD_ARTIFACTS_URL/artifacts-$GITHUB_RUN_ID.tar.gz
          mkdir -p artifacts ~/.safe/node
          tar -xvf artifacts-$GITHUB_RUN_ID.tar.gz -C artifacts/ .
          chmod +x artifacts/sn_node
          chmod +x artifacts/testnet
          cp artifacts/sn_node ~/.safe/node

      - name: Start the network
        run: ./artifacts/testnet --interval 30000
        env:
          RUST_LOG: "sn_node,sn_consensus,sn_dysfunction=trace,sn_interface=trace"

      - name: Wait for all nodes to join
        shell: bash
        run: ./resources/scripts/wait_for_nodes_to_join.sh
        timeout-minutes: 5

      - name: Build all tests before running non ubuntu
        run: cargo test --no-run --release --features msg-happy-path --package sn_client
        timeout-minutes: 50

      - name: Run client tests
        env:
          RUST_LOG: "sn_client,sn_interface"
        run: cargo test --release --features msg-happy-path --package sn_client -- --test-threads=1
        timeout-minutes: 50

      - name: Run example app for file API against local network
        timeout-minutes: 10
        shell: bash
        run: cargo run --release --example client_files --features msg-happy-path --package sn_client

      - name: Ensure no nodes have left during test runs
        timeout-minutes: 1
        shell: bash
        # we just want to print out the info. If there is none, an exit code of 1 is returned, so here we return true
        run: rg "Membership - decided" $HOME/.safe/node/local-test-network | rg Left || true

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        continue-on-error: true
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Kill all nodes
        shell: bash
        timeout-minutes: 1
        if: failure()
        continue-on-error: true
        run: |
          pkill sn_node
          echo "$(pgrep sn_node | wc -l) nodes still running"

      - name: Generate StateMap
        shell: bash
        continue-on-error: true
        run: |
          cargo install --git https://github.com/TritonDataCenter/statemap.git
          ./resources/scripts/statemap-preprocess.sh --run-statemap > safe_statemap.svg

      - name: Upload StateMap
        uses: actions/upload-artifact@main
        with:
          name: statemap_e2e_${{matrix.os}}.svg
          path: safe_statemap.svg
        continue-on-error: true

      - name: Tar log files
        shell: bash
        continue-on-error: true
        run: find ~/.safe/node/local-test-network -iname '*.log*' | tar -zcvf log_files.tar.gz --files-from -
        if: failure()

      - name: Upload Node Logs
        uses: actions/upload-artifact@main
        with:
          name: sn_node_logs_e2e_${{matrix.os}}
          path: log_files.tar.gz
        if: failure()
        continue-on-error: true

  e2e-churn:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: E2E Churn test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      # This starts a NODE_COUNT node network, and then adds 12 more nodes. We should kill before moving on to split checks
      - name: Run network churn data integrity test
        timeout-minutes: 55 # made 55 for now due to slow network startup
        shell: bash
        run: cargo run --release --example churn

      - name: Ensure no nodes have left during test runs
        timeout-minutes: 1
        shell: bash
        # we just want to print out the info. If there is none, an exit code of 1 is returned, so here we return true
        run: rg "Membership - decided" $HOME/.safe/node/local-test-network | rg Left || true

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        continue-on-error: true
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Kill all nodes
        shell: bash
        timeout-minutes: 1
        if: failure()
        continue-on-error: true
        run: |
          pkill sn_node
          echo "$(pgrep sn_node | wc -l) nodes still running"

      - name: Generate StateMap
        shell: bash
        if: failure()
        continue-on-error: true
        run: |
          cargo install --git https://github.com/TritonDataCenter/statemap.git
          ./resources/scripts/statemap-preprocess.sh --run-statemap > safe_statemap.svg

      - name: Upload StateMap
        uses: actions/upload-artifact@main
        if: failure()
        with:
          name: statemap_e2e_split_self_hosted_ubuntu.svg
          path: safe_statemap.svg
        continue-on-error: true

      - name: Tar log files
        shell: bash
        continue-on-error: true
        run: find ~/.safe/node/local-test-network -iname '*.log*' | tar -zcvf log_files.tar.gz --files-from -
        if: failure()

      - name: Upload Node Logs
        uses: actions/upload-artifact@main
        with:
          name: sn_node_logs_e2e_split_self_hosted_ubuntu
          path: log_files.tar.gz
        if: failure()
        continue-on-error: true

  api:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: API tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: install ripgrep
        run: sudo apt-get install ripgrep

      - name: download and unpack artifacts
        run: |
          curl -O $BUILD_ARTIFACTS_URL/artifacts-$GITHUB_RUN_ID.tar.gz
          mkdir -p artifacts ~/.safe/node
          tar -xvf artifacts-$GITHUB_RUN_ID.tar.gz -C artifacts/ .
          chmod +x artifacts/sn_node
          chmod +x artifacts/testnet
          cp artifacts/sn_node ~/.safe/node

      - name: Start the network
        run: ./artifacts/testnet --interval 30000
        env:
          RUST_LOG: "sn_node,sn_consensus,sn_fault_detection=trace,sn_interface=trace"

      - name: Wait for all nodes to join
        shell: bash
        run: ./resources/scripts/wait_for_nodes_to_join.sh
        timeout-minutes: 5

      - name: Build all tests before running
        run: cargo test --no-run --release --features check-replicas --package sn_api
        timeout-minutes: 50

      - name: Run API tests
        env:
          RUST_LOG: "sn_client,sn_interface"
        run: cargo test --release --features check-replicas --package sn_api
        timeout-minutes: 30

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        if: failure() && matrix.os
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Kill all nodes
        shell: bash
        timeout-minutes: 1
        if: failure()
        continue-on-error: true
        run: |
          pkill sn_node
          echo "$(pgrep sn_node | wc -l) nodes still running"

      - name: Ensure no nodes have left during test runs
        timeout-minutes: 1
        shell: bash
        # we just want to print out the info. If there is none, an exit code of 1 is returned, so here we return true
        run: rg "Membership - decided" $HOME/.safe/node/local-test-network | rg Left || true

      - name: Generate StateMap
        shell: bash
        continue-on-error: true
        run: |
          cargo install --git https://github.com/TritonDataCenter/statemap.git
          ./resources/scripts/statemap-preprocess.sh --run-statemap > safe_statemap.svg

      - name: Upload StateMap
        uses: actions/upload-artifact@main
        with:
          name: statemap_api_${{matrix.os}}.svg
          path: safe_statemap.svg
        continue-on-error: true

      - name: Tar log files
        shell: bash
        continue-on-error: true
        run: find ~/.safe/node/local-test-network -iname '*.log*' | tar -zcvf log_files.tar.gz --files-from -
        if: failure()

      - name: Upload Node Logs
        uses: actions/upload-artifact@main
        with:
          name: sn_node_logs_api_${{matrix.os}}
          path: log_files.tar.gz
        if: failure()
        continue-on-error: true

  cli:
    if: "!startsWith(github.event.pull_request.title, 'Automated version bump')"
    name: CLI tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: install ripgrep
        run: sudo apt-get install ripgrep

      - name: download and unpack artifacts
        run: |
          curl -O $BUILD_ARTIFACTS_URL/artifacts-$GITHUB_RUN_ID.tar.gz
          mkdir -p artifacts ~/.safe/node
          tar -xvf artifacts-$GITHUB_RUN_ID.tar.gz -C artifacts/ .
          chmod +x artifacts/sn_node
          chmod +x artifacts/testnet
          cp artifacts/sn_node ~/.safe/node

      - name: Start the network
        run: ./artifacts/testnet --interval 30000
        env:
          RUST_LOG: "sn_node,sn_consensus,sn_fault_detection=trace,sn_interface=trace"

      - name: Wait for all nodes to join
        shell: bash
        run: ./resources/scripts/wait_for_nodes_to_join.sh
        timeout-minutes: 5

      - name: Generate keys for test run
        run: cargo run --release --bin safe keys create --for-cli

      - name: Run CLI tests
        run: cargo test --release --features check-replicas --package sn_cli
        timeout-minutes: 50

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        if: failure() && matrix.os
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Kill all nodes
        shell: bash
        timeout-minutes: 1
        if: failure()
        continue-on-error: true
        run: |
          pkill sn_node
          echo "$(pgrep sn_node | wc -l) nodes still running"

      - name: Ensure no nodes have left during test runs
        timeout-minutes: 1
        shell: bash
        # we just want to print out the info. If there is none, an exit code of 1 is returned, so here we return true
        run: rg "Membership - decided" $HOME/.safe/node/local-test-network | rg Left || true

      - name: Generate StateMap
        shell: bash
        continue-on-error: true
        run: |
          cargo install --git https://github.com/TritonDataCenter/statemap.git
          ./resources/scripts/statemap-preprocess.sh --run-statemap > safe_statemap.svg

      - name: Upload StateMap
        uses: actions/upload-artifact@main
        with:
          name: statemap_cli_${{matrix.os}}.svg
          path: safe_statemap.svg
        continue-on-error: true

      - name: Tar log files
        shell: bash
        continue-on-error: true
        run: find ~/.safe/node/local-test-network -iname '*.log*' | tar -zcvf log_files.tar.gz --files-from -
        if: failure()

      - name: Upload Node Logs
        uses: actions/upload-artifact@main
        with:
          name: sn_node_logs_cli_${{matrix.os}}
          path: log_files.tar.gz
        if: failure()
        continue-on-error: true
